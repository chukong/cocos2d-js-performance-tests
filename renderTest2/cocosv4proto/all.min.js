"use strict";
var cc;
!function () {
    !function () {
        console.log("%c", "padding:140px 250px;line-height:300px;background:url(http://www.cocos2d-x.org/attachments/download/1508) no-repeat;")
    }(), function () {
        var frameTime = 1e3 / 60, lastTime = (new Date).getTime(), stTime = function (callback) {
            var currTime = (new Date).getTime(), timeToCall = Math.max(0, frameTime - (currTime - lastTime)), id = window.setTimeout(function () {
                callback()
            }, timeToCall);
            return lastTime = currTime + timeToCall, id
        }, ctTime = function (id) {
            clearTimeout(id)
        }, win = window;
        win.requestAnimFrame = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || stTime, win.cancelAnimationFrame = win.cancelAnimationFrame || win.cancelRequestAnimationFrame || win.msCancelRequestAnimationFrame || win.mozCancelRequestAnimationFrame || win.oCancelRequestAnimationFrame || win.webkitCancelRequestAnimationFrame || win.msCancelAnimationFrame || win.mozCancelAnimationFrame || win.webkitCancelAnimationFrame || win.oCancelAnimationFrame || ctTime
    }()
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        var Color = function () {
            function Color(r, g, b, a) {
                "undefined" == typeof r && (r = 1), "undefined" == typeof g && (g = 1), "undefined" == typeof b && (b = 1), "undefined" == typeof a && (a = 1), this._dirty = !0, this._dirtyHex = !0, this._color = new Float32Array(4), this._color[0] = r, this._color[1] = g, this._color[2] = b, this._color[3] = a
            }

            return Color.prototype.getHexRGB = function () {
                return this._dirtyHex && this.__calculateHexStyle(), this._hexRGB
            }, Color.prototype.getHexRGBA = function () {
                return this._dirtyHex && this.__calculateHexStyle(), this._hexRGBA
            }, Color.prototype.__calculateHexStyle = function () {
                var r = (255 * this._color[0] >> 0).toString(16).toUpperCase(), g = (255 * this._color[1] >> 0).toString(16).toUpperCase(), b = (255 * this._color[2] >> 0).toString(16).toUpperCase();
                this._hexRGB = "#" + (r.length < 2 ? "0" : "") + r + (g.length < 2 ? "0" : "") + g + (b.length < 2 ? "0" : "") + b;
                var a = (255 * this._color[3] >> 0).toString(16).toUpperCase();
                this._hexRGBA = this._hexRGB + (a.length < 2 ? "0" : "") + a
            }, Color.prototype.__calculateFillStyle = function () {
                this._fillStyle = "rgba(" + (255 * this._color[0] >> 0) + "," + (255 * this._color[1] >> 0) + "," + (255 * this._color[2] >> 0) + "," + this._color[3] + ")", this._dirty = !1
            }, Color.prototype.getFillStyle = function () {
                return this._dirty && this.__calculateFillStyle(), this._fillStyle
            }, Object.defineProperty(Color.prototype, "r", {get: function () {
                return this._color[0]
            }, set: function (v) {
                this._color[0] = v, this._dirty = !0, this._dirtyHex = !0
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Color.prototype, "g", {get: function () {
                return this._color[1]
            }, set: function (v) {
                this._color[1] = v, this._dirty = !0, this._dirtyHex = !0
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Color.prototype, "b", {get: function () {
                return this._color[2]
            }, set: function (v) {
                this._color[2] = v, this._dirty = !0, this._dirtyHex = !0
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Color.prototype, "a", {get: function () {
                return this._color[3]
            }, set: function (v) {
                this._color[3] = v, this._dirty = !0, this._dirtyHex = !0
            }, enumerable: !0, configurable: !0}), Color.createFromRGBA = function (r, g, b, a) {
                if ("object" == typeof r) {
                    var c = r;
                    return new Color(c.r / 255, c.g / 255, c.b / 255, c.a / 255)
                }
                return"number" == typeof r ? new Color(r / 255, g / 255, b / 255, a / 255) : "string" == typeof r ? Color.fromStringToColor(r) : Color.WHITE
            }, Color.fromRGBStringToColor = function (color) {
                color = color.toLowerCase();
                var skip = 4;
                0 === color.indexOf("rgba") && (skip = 5), color = color.substring(skip, color.length - 1);
                var c, colors = color.split(",");
                return c = 3 === colors.length ? new Color(parseInt(colors[0]) / 255, parseInt(colors[1]) / 255, parseInt(colors[2]) / 255) : new Color(parseInt(colors[0]) / 255, parseInt(colors[1]) / 255, parseInt(colors[2]) / 255, parseInt(colors[3]))
            }, Color.fromStringToColor = function (hex) {
                if (hex = hex.toLowerCase(), 0 === hex.indexOf("rgb") || 0 === hex.indexOf("rgba"))return Color.fromRGBStringToColor(hex);
                if ("#" === hex.charAt(0) && (hex = hex.substring(1)), 3 !== hex.length && 4 !== hex.length && 6 !== hex.length && 8 !== hex.length)return Color.MAGENTA;
                var r, g, b, a;
                return hex.length < 6 ? (r = parseInt(hex.charAt(0), 16), g = parseInt(hex.charAt(1), 16), b = parseInt(hex.charAt(2), 16), a = 4 === hex.length ? parseInt(hex.charAt(3), 16) : 15, new Color(r / 15, g / 15, b / 15, a / 15)) : (r = parseInt(hex.substring(0, 2), 16), g = parseInt(hex.substring(2, 4), 16), b = parseInt(hex.substring(4, 6), 16), a = 8 === hex.length ? parseInt(hex.substring(6, 8), 16) : 255, new Color(r / 255, g / 255, b / 255, a / 255))
            }, Color.TRANSPARENT_BLACK = new Color(0, 0, 0, 0), Color.BLACK = new Color(0, 0, 0, 1), Color.RED = new Color(1, 0, 0, 1), Color.GREEN = new Color(0, 1, 0, 1), Color.BLUE = new Color(0, 0, 1, 1), Color.WHITE = new Color(1, 1, 1, 1), Color.MAGENTA = new Color(1, 0, 1, 1), Color.YELLOW = new Color(1, 1, 0, 1), Color.CYAN = new Color(0, 1, 1, 1), Color
        }();
        math.Color = Color
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        var Matrix3 = function () {
            function Matrix3() {
                this._matrix = new Float32Array(9), this.identity()
            }

            return Matrix3.prototype.identity = function () {
                return this._matrix[0] = 1, this._matrix[1] = 0, this._matrix[2] = 0, this._matrix[3] = 0, this._matrix[4] = 1, this._matrix[5] = 0, this._matrix[6] = 0, this._matrix[7] = 0, this._matrix[8] = 1, this
            }, Matrix3.prototype.copy = function (m) {
                this._matrix.set(m._matrix)
            }, Matrix3.prototype.setTransformAll = function (node) {
                var c, s, _m00, _m01, _m10, _m11, m00, m01, m02, m10, m11, m12;
                m00 = 1, m01 = 0, m10 = 0, m11 = 1, m02 = node._position.x - node._positionAnchor.x * node._contentSize.width, m12 = node._position.y - node._positionAnchor.y * node._contentSize.height;
                var rx = node._transformationAnchor.x * node._contentSize.width, ry = node._transformationAnchor.y * node._contentSize.height;
                m02 += m00 * rx + m01 * ry, m12 += m10 * rx + m11 * ry;
                var angle = node._rotation.x * Math.PI / 180;
                c = Math.cos(angle), s = Math.sin(angle), _m00 = m00, _m01 = m01, _m10 = m10, _m11 = m11, m00 = _m00 * c + _m01 * s, m01 = -_m00 * s + _m01 * c, m10 = _m10 * c + _m11 * s, m11 = -_m10 * s + _m11 * c, m00 *= node._scale.x, m01 *= node._scale.y, m10 *= node._scale.x, m11 *= node._scale.y, m02 += -m00 * rx - m01 * ry, m12 += -m10 * rx - m11 * ry;
                var mm = this._matrix;
                mm[0] = m00, mm[1] = m01, mm[3] = m10, mm[4] = m11, mm[2] = m02, mm[5] = m12
            }, Matrix3.prototype.setTransformScale = function (node) {
                var m00, m01, m02, m10, m11, m12;
                m00 = 1, m01 = 0, m10 = 0, m11 = 1, m02 = node._position.x - node._positionAnchor.x * node._contentSize.width, m12 = node._position.y - node._positionAnchor.y * node._contentSize.height;
                var rx = node._transformationAnchor.x * node._contentSize.width, ry = node._transformationAnchor.y * node._contentSize.height;
                m02 += m00 * rx + m01 * ry, m12 += m10 * rx + m11 * ry, m00 *= node._scale.x, m01 *= node._scale.y, m10 *= node._scale.x, m11 *= node._scale.y, m02 += -m00 * rx - m01 * ry, m12 += -m10 * rx - m11 * ry;
                var mm = this._matrix;
                mm[0] = m00, mm[1] = m01, mm[3] = m10, mm[4] = m11, mm[2] = m02, mm[5] = m12
            }, Matrix3.prototype.setTransformTranslate = function (node) {
                var mm = this._matrix, x = node._position.x - node._positionAnchor.x * node._contentSize.width, y = node._position.y - node._positionAnchor.y * node._contentSize.height;
                mm[2] = x, mm[5] = y, mm[0] = 1, mm[1] = 0, mm[3] = 0, mm[4] = 1, mm[6] = 0, mm[7] = 0, mm[8] = 1
            }, Matrix3.prototype.multiply = function (mat1) {
                var m0 = this._matrix, m1 = mat1._matrix, mm0 = m1[0], mm1 = m1[1], mm2 = m1[2], mm3 = m1[3], mm4 = m1[4], mm5 = m1[5], tm0 = m0[0], tm1 = m0[1], tm2 = m0[2];
                m0[0] = tm0 * mm0 + tm1 * mm3, m0[1] = tm0 * mm1 + tm1 * mm4, m0[2] = tm0 * mm2 + tm1 * mm5 + tm2;
                var tm3 = m0[3], tm4 = m0[4], tm5 = m0[5];
                m0[3] = tm3 * mm0 + tm4 * mm3, m0[4] = tm3 * mm1 + tm4 * mm4, m0[5] = tm3 * mm2 + tm4 * mm5 + tm5, m0[6] = 0, m0[7] = 0, m0[8] = 1
            }, Matrix3.prototype.transformPoint = function (point) {
                var x, y, tm = this._matrix;
                return x = point.x, y = point.y, point.x = x * tm[0] + y * tm[1] + tm[2], point.y = x * tm[3] + y * tm[4] + tm[5], point
            }, Matrix3.prototype.setRenderingContextTransform = function (ctx) {
                var mm = this._matrix;
                ctx.setTransform(mm[0], mm[3], mm[1], mm[4], mm[2], mm[5])
            }, Matrix3.prototype.setTransform = function (a, b, c, d, tx, ty) {
                var matrix = this._matrix;
                matrix[0] = a, matrix[3] = b, matrix[1] = c, matrix[4] = d, matrix[2] = tx, matrix[5] = ty, matrix[6] = 0, matrix[7] = 0, matrix[8] = 1
            }, Matrix3.prototype.transform = function (a, b, c, d, tx, ty) {
                Matrix3._workingMatrix.setTransform(a, b, c, d, tx, ty), this.multiply(Matrix3._workingMatrix)
            }, Matrix3.prototype.setTranslate = function (x, y) {
                return this.identity(), this._matrix[2] = x, this._matrix[5] = y, this
            }, Matrix3.prototype.setRotate = function (angle) {
                return this.identity(), this._matrix[0] = Math.cos(angle), this._matrix[1] = -Math.sin(angle), this._matrix[3] = Math.sin(angle), this._matrix[4] = Math.cos(angle), this
            }, Matrix3.prototype.setScale = function (x, y) {
                return this.identity(), this._matrix[0] = x, this._matrix[4] = y, this
            }, Matrix3._workingMatrix = new Matrix3, Matrix3.IDENTITY = new Matrix3, Matrix3
        }();
        math.Matrix3 = Matrix3
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        var Matrix4 = function () {
            function Matrix4() {
                this._matrix = new Float32Array(16)
            }

            return Matrix4
        }();
        math.Matrix4 = Matrix4
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        var Vector = function () {
            function Vector(x, y, z) {
                "undefined" == typeof x && (x = 0), "undefined" == typeof y && (y = 0), "undefined" == typeof z && (z = 0), this.x = x, this.y = y, this.z = z
            }

            return Vector.prototype.set = function (x, y, z) {
                return this.x = x, this.y = y, this.z = "undefined" != typeof z ? z : 0, this
            }, Vector.prototype.distance = function (v) {
                return Vector.distance(this, v)
            }, Vector.prototype.sub = function (v) {
                this.x += v.x, this.y += v.y
            }, Vector.prototype.mult = function (v) {
                return this.x *= v, this.y *= v, this.z *= v, this
            }, Vector.sub = function (v0, v1) {
                return(new Vector).set(v1.x - v0.x, v1.y - v0.y)
            }, Vector.distance = function (v0, v1) {
                var dx = v1.x - v0.x, dy = v1.y - v0.y;
                return Math.sqrt(dx * dx + dy * dy)
            }, Vector.prototype.equals = function (v) {
                return this.x === v.x && this.y === v.y && this.z === v.z
            }, Vector
        }();
        math.Vector = Vector
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        var Rectangle = function () {
            function Rectangle(x, y, w, h) {
                "undefined" == typeof x && (x = 0), "undefined" == typeof y && (y = 0), "undefined" == typeof w && (w = 0), "undefined" == typeof h && (h = 0), this.x = x, this.y = y, this.w = w, this.h = h, this.x1 = 0, this.y1 = 0, this.set(x, y, w, h)
            }

            return Rectangle.prototype.set = function (x, y, w, h) {
                return this.x = x, this.y = y, this.w = w, this.h = h, this.x1 = x + w, this.y1 = y + h, this
            }, Rectangle.prototype.intersects = function (x, y, w, h) {
                if (x instanceof cc.math.Rectangle) {
                    var r = x;
                    x = r.x, y = r.y, w = r.w, h = r.h
                }
                return this.x1 < x ? !1 : this.y1 < y ? !1 : this.x >= x + w ? !1 : this.y >= y + h ? !1 : !0
            }, Rectangle.prototype.normalizeBy = function (w, h) {
                return this.x /= w, this.y /= h, this.x1 /= w, this.y1 /= h, this.w /= w, this.h /= h, this
            }, Rectangle.prototype.setEmpty = function () {
                this.x = 0, this.y = 0, this.x1 = 0, this.y1 = 0, this.w = 0, this.h = 0
            }, Rectangle.prototype.isEmpty = function () {
                return 0 === this.w || 0 === this.h
            }, Rectangle.prototype.intersectWith = function (r) {
                return this.intersects(r) ? (this.x < r.x && (this.w -= r.x - this.x, this.x = r.x), this.y < r.y && (this.h -= r.y - this.y, this.y = r.y), this.w > r.w && (this.w = r.w), this.h > r.h && (this.h = r.h), this.x1 = this.x + this.w, this.y1 = this.y + this.h) : this.setEmpty(), this
            }, Rectangle.prototype.contains = function (x, y) {
                var tx, ty;
                if ("number" != typeof x) {
                    var v = x;
                    tx = v.x, ty = v.y
                } else tx = x, ty = y;
                return tx >= this.x && ty >= this.y && tx < this.x1 && ty < this.y1
            }, Rectangle
        }();
        math.Rectangle = Rectangle
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        var Dimension = function () {
            function Dimension(width, height) {
                "undefined" == typeof width && (width = 0), "undefined" == typeof height && (height = 0), this.width = width, this.height = height
            }

            return Dimension.prototype.set = function (w, h) {
                if ("number" == typeof w)this.width = w, this.height = h; else {
                    var d = w;
                    this.width = d.width, this.height = d.height
                }
                return this
            }, Dimension.prototype.clone = function () {
                return new Dimension(this.width, this.height)
            }, Dimension
        }();
        math.Dimension = Dimension
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        !function (path) {
            path.DEFAULT_TRACE_LENGTH = 30
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        !function (path) {
            var Vector = cc.math.Vector, __v = new Vector, SegmentLine = function () {
                function SegmentLine(data) {
                    this._parent = null, this._length = 0, data && this.initialize(data.start, data.end)
                }

                return SegmentLine.prototype.getParent = function () {
                    return this._parent
                }, SegmentLine.prototype.setParent = function (s) {
                    this._parent = s
                }, SegmentLine.prototype.initialize = function (start, end) {
                    this._start = new Vector(start.x, start.y), this._end = new Vector(end.x, end.y), this._length = Math.sqrt((this._start.x - this._end.x) * (this._start.x - this._end.x) + (this._start.y - this._end.y) * (this._start.y - this._end.y))
                }, SegmentLine.prototype.getLength = function () {
                    return this._length
                }, SegmentLine.prototype.trace = function (numPoints, dstArray) {
                    return dstArray = dstArray || [], dstArray.push(this._start), dstArray.push(this._end), dstArray
                }, SegmentLine.prototype.getValueAt = function (normalizedPos, out) {
                    return out = out || __v, out.x = (this._end.x - this._start.x) * normalizedPos + this._start.x, out.y = (this._end.y - this._start.y) * normalizedPos + this._start.y, out
                }, SegmentLine.prototype.getStartingPoint = function () {
                    return this._start
                }, SegmentLine.prototype.getEndingPoint = function () {
                    return this._end
                }, SegmentLine.prototype.clone = function () {
                    var sl = new SegmentLine({start: {x: this._start.x, y: this._start.y}, end: {x: this._end.x, y: this._end.y}});
                    return sl._length = this._length, this
                }, SegmentLine.prototype.getControlPoints = function (arr) {
                    return arr = arr || [], arr.push(this._start), arr.push(this._end), arr
                }, SegmentLine.prototype.setDirty = function () {
                }, SegmentLine
            }();
            path.SegmentLine = SegmentLine
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        !function (path) {
            function __recursive_bezier(points, x1, y1, x2, y2, x3, y3, x4, y4, level) {
                if (!(level > curve_recursion_limit)) {
                    var x12 = (x1 + x2) / 2, y12 = (y1 + y2) / 2, x23 = (x2 + x3) / 2, y23 = (y2 + y3) / 2, x34 = (x3 + x4) / 2, y34 = (y3 + y4) / 2, x123 = (x12 + x23) / 2, y123 = (y12 + y23) / 2, x234 = (x23 + x34) / 2, y234 = (y23 + y34) / 2, x1234 = (x123 + x234) / 2, y1234 = (y123 + y234) / 2;
                    if (level > 0) {
                        var da1, da2, dx = x4 - x1, dy = y4 - y1, d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx), d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx);
                        if (d2 > curve_collinearity_epsilon && d3 > curve_collinearity_epsilon) {
                            if (m_distance_tolerance * (dx * dx + dy * dy) >= (d2 + d3) * (d2 + d3)) {
                                if (curve_angle_tolerance_epsilon > m_angle_tolerance)return void points.push(new Vector(x1234, y1234));
                                var a23 = Math.atan2(y3 - y2, x3 - x2);
                                if (da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1)), da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23), da1 >= Math.PI && (da1 = 2 * Math.PI - da1), da2 >= Math.PI && (da2 = 2 * Math.PI - da2), m_angle_tolerance > da1 + da2)return void points.push(new Vector(x1234, y1234));
                                if (0 !== m_cusp_limit) {
                                    if (da1 > m_cusp_limit)return void points.push(new Vector(x2, y2));
                                    if (da2 > m_cusp_limit)return void points.push(new Vector(x3, y3))
                                }
                            }
                        } else if (d2 > curve_collinearity_epsilon) {
                            if (m_distance_tolerance * (dx * dx + dy * dy) >= d2 * d2) {
                                if (curve_angle_tolerance_epsilon > m_angle_tolerance)return void points.push(new Vector(x1234, y1234));
                                if (da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1)), da1 >= Math.PI && (da1 = 2 * Math.PI - da1), m_angle_tolerance > da1)return points.push(new Vector(x2, y2)), void points.push(new Vector(x3, y3));
                                if (0 !== m_cusp_limit && da1 > m_cusp_limit)return void points.push(new Vector(x2, y2))
                            }
                        } else if (d3 > curve_collinearity_epsilon) {
                            if (m_distance_tolerance * (dx * dx + dy * dy) >= d3 * d3) {
                                if (curve_angle_tolerance_epsilon > m_angle_tolerance)return void points.push(new Vector(x1234, y1234));
                                if (da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2)), da1 >= Math.PI && (da1 = 2 * Math.PI - da1), m_angle_tolerance > da1)return points.push(new Vector(x2, y2)), void points.push(new Vector(x3, y3));
                                if (0 !== m_cusp_limit && da1 > m_cusp_limit)return void points.push(new Vector(x3, y3))
                            }
                        } else if (dx = x1234 - (x1 + x4) / 2, dy = y1234 - (y1 + y4) / 2, m_distance_tolerance >= dx * dx + dy * dy)return void points.push(new Vector(x1234, y1234))
                    }
                    __recursive_bezier(points, x1, y1, x12, y12, x123, y123, x1234, y1234, level + 1), __recursive_bezier(points, x1234, y1234, x234, y234, x34, y34, x4, y4, level + 1)
                }
            }

            function traceBezier(p0, cp0, cp1, p1, m_points) {
                var x1 = p0.x, y1 = p0.y, x2 = cp0.x, y2 = cp0.y, x3 = cp1.x, y3 = cp1.y, x4 = p1.x, y4 = p1.y, m_points = m_points || [];
                return m_distance_tolerance = .5 / m_approximation_scale, m_distance_tolerance *= m_distance_tolerance, m_points.push(new Vector(x1, y1)), __recursive_bezier(m_points, x1, y1, x2, y2, x3, y3, x4, y4, 0), m_points.push(new Vector(x4, y4)), m_points
            }

            function traceQuadratic(p0, cp0, p1, m_points) {
                var x1 = p0.x, y1 = p0.y, x2 = cp0.x, y2 = cp0.y, x3 = p1.x, y3 = p1.y;
                return m_points = m_points || [], m_distance_tolerance = .5 / m_approximation_scale, m_distance_tolerance *= m_distance_tolerance, m_points.push(new Vector(x1, y1)), __recursive_quadratic(m_points, x1, y1, x2, y2, x3, y3, 0), m_points.push(new Vector(x3, y3)), m_points
            }

            function __recursive_quadratic(points, x1, y1, x2, y2, x3, y3, level) {
                if (!(level > curve_recursion_limit)) {
                    var x12 = (x1 + x2) / 2, y12 = (y1 + y2) / 2, x23 = (x2 + x3) / 2, y23 = (y2 + y3) / 2, x123 = (x12 + x23) / 2, y123 = (y12 + y23) / 2, dx = x3 - x1, dy = y3 - y1, d = Math.abs((x2 - x3) * dy - (y2 - y3) * dx);
                    if (d > curve_collinearity_epsilon) {
                        if (m_distance_tolerance * (dx * dx + dy * dy) >= d * d) {
                            if (curve_angle_tolerance_epsilon > m_angle_tolerance)return void points.push(new Vector(x123, y123));
                            var da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));
                            if (da >= Math.PI && (da = 2 * Math.PI - da), m_angle_tolerance > da)return void points.push(new Vector(x123, y123))
                        }
                    } else if (dx = x123 - (x1 + x3) / 2, dy = y123 - (y1 + y3) / 2, m_distance_tolerance >= dx * dx + dy * dy)return void points.push(new Vector(x123, y123));
                    __recursive_quadratic(points, x1, y1, x12, y12, x123, y123, level + 1), __recursive_quadratic(points, x123, y123, x23, y23, x3, y3, level + 1)
                }
            }

            var Vector = cc.math.Vector, curve_recursion_limit = 8, m_angle_tolerance = .2, m_cusp_limit = 15 * Math.PI / 180, m_approximation_scale = 1, curve_collinearity_epsilon = .001, curve_angle_tolerance_epsilon = 0, m_distance_tolerance = 1e-4;
            path.traceBezier = traceBezier, path.traceQuadratic = traceQuadratic
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        !function (_path) {
            var Vector = cc.math.Vector, __v0 = new Vector, SegmentBezier = function () {
                function SegmentBezier(data) {
                    this._p0 = null, this._cp0 = null, this._cp1 = null, this._p1 = null, this._dirty = !0, this._parent = null, this._length = 0, this._flattened = !1, this._cachedContourPoints = null, data && this.initialize(data.p0, data.p1, data.p2, data.p3)
                }

                return SegmentBezier.prototype.initialize = function (p0, p1, p2, p3) {
                    this._p0 = new Vector(p0.x, p0.y), this._cp0 = new Vector(p1.x, p1.y), this._cp1 = new Vector(p2.x, p2.y), this._p1 = new Vector(p3.x, p3.y), this.__update(), this._dirty = !1
                }, SegmentBezier.prototype.flatten = function (numPoints) {
                    if (this._dirty || !this._flattened || numPoints !== this._cachedContourPoints.length) {
                        var points = cc.math.path.traceBezier(this._p0, this._cp0, this._cp1, this._p1);
                        numPoints = numPoints || 2 * points.length;
                        var path = cc.math.Path.createFromPoints(points);
                        return points = [], path.trace(numPoints, points), this._flattened = !0, this._cachedContourPoints = points, this.__calculateLength(), this._dirty = !1, this
                    }
                }, SegmentBezier.prototype.__update = function (numPoints) {
                    if (this._dirty = !1, numPoints = numPoints || this._cachedContourPoints && this._cachedContourPoints.length || cc.math.path.DEFAULT_TRACE_LENGTH, this._flattened)this.flatten(); else {
                        this._cachedContourPoints = [];
                        for (var i = 0; numPoints >= i; i++)this._cachedContourPoints.push(this.getValueAt(i / numPoints, new Vector))
                    }
                    this.__calculateLength()
                }, SegmentBezier.prototype.__calculateLength = function () {
                    var points = this._cachedContourPoints;
                    this._length = 0;
                    for (var i = 0; i < points.length - 1; i++)this._length += points[i].distance(points[i + 1])
                }, SegmentBezier.prototype.getParent = function () {
                    return this._parent
                }, SegmentBezier.prototype.setParent = function (s) {
                    this._parent = s
                }, SegmentBezier.prototype.getLength = function () {
                    return this._dirty && this.__update(), this._length
                }, SegmentBezier.prototype.trace = function (numPoints, dstArray) {
                    if (this._dirty && this.__update(numPoints), dstArray = dstArray || [], this._cachedContourPoints !== dstArray)for (var i = 0; i < this._cachedContourPoints.length; i++)dstArray.push(this._cachedContourPoints[i]);
                    return dstArray
                }, SegmentBezier.prototype.getValueAt = function (normalizedPos, out) {
                    if (this._dirty && this.__update(), out = out || __v0, (normalizedPos > 1 || -1 > normalizedPos) && (normalizedPos %= 1), 0 > normalizedPos && (normalizedPos += 1), this._flattened) {
                        var fp = this._cachedContourPoints, segment = normalizedPos * fp.length - 1;
                        normalizedPos = (segment - (0 | segment)) / (1 / (fp.length - 1)), segment |= 0, out.x = fp[segment].x + (fp[segment + 1].x - fp[segment].x) * normalizedPos, out.y = fp[segment].y + (fp[segment + 1].y - fp[segment].y) * normalizedPos
                    } else if (1 === normalizedPos)out.set(this._p1.x, this._p1.y); else if (0 === normalizedPos)out.set(this._p0.x, this._p0.y); else {
                        var t = normalizedPos, t2 = t * t, t3 = t * t2, cl0 = this._p0, cl1 = this._cp0, cl2 = this._cp1, cl3 = this._p1;
                        out.x = cl0.x + t * (3 * -cl0.x + t * (3 * cl0.x - cl0.x * t)) + t * (3 * cl1.x + t * (-6 * cl1.x + 3 * cl1.x * t)) + t2 * (3 * cl2.x - 3 * cl2.x * t) + t3 * cl3.x, out.y = cl0.y + t * (3 * -cl0.y + t * (3 * cl0.y - cl0.y * t)) + t * (3 * cl1.y + t * (-6 * cl1.y + 3 * cl1.y * t)) + t2 * (3 * cl2.y - 3 * cl2.y * t) + t3 * cl3.y
                    }
                    return out
                }, SegmentBezier.prototype.getStartingPoint = function () {
                    return this._p0
                }, SegmentBezier.prototype.getEndingPoint = function () {
                    return this._p1
                }, SegmentBezier.prototype.clone = function () {
                    var segment = new SegmentBezier({p0: {x: this._p0.x, y: this._p0.y}, p1: {x: this._cp0.x, y: this._cp0.y}, p2: {x: this._cp1.x, y: this._cp1.y}, p3: {x: this._p1.x, y: this._p1.y}});
                    return this._flattened && segment.flatten(this._cachedContourPoints.length), segment._length = this._length, segment
                }, SegmentBezier.prototype.getControlPoints = function (arr) {
                    return arr = arr || [], arr.push(this._p0), arr.push(this._cp0), arr.push(this._cp1), arr.push(this._p1), arr
                }, SegmentBezier.prototype.setDirty = function () {
                    this._dirty = !0
                }, SegmentBezier
            }();
            _path.SegmentBezier = SegmentBezier
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        !function (path) {
            var Vector = cc.math.Vector, __v0 = new Vector, SegmentArc = function () {
                function SegmentArc(data) {
                    this._startingPoint = null, this._endingPoint = null, this._length = 0, this.initialize(data)
                }

                return SegmentArc.prototype.initialize = function (data) {
                    this._x = data.x, this._y = data.y, this._radius = data.radius, this._startAngle = data.startAngle, this._endAngle = data.endAngle, this._ccw = data.ccw, !this._ccw && this._endAngle <= this._startAngle ? this._endAngle += 2 * Math.PI : this._ccw && this._startAngle <= this._endAngle && (this._startAngle += 2 * Math.PI);
                    var s = this.getValueAt(0);
                    this._startingPoint = new Vector, this._startingPoint.x = s.x, this._startingPoint.y = s.y, s = this.getValueAt(1), this._endingPoint = new Vector, this._endingPoint.x = s.x, this._endingPoint.y = s.y, this._length = Math.abs(this._radius * (this._endAngle - this._startAngle))
                }, SegmentArc.prototype.getStartingPoint = function () {
                    return this._startingPoint
                }, SegmentArc.prototype.getEndingPoint = function () {
                    return this._endingPoint
                }, SegmentArc.prototype.getLength = function () {
                    return this._length
                }, SegmentArc.prototype.getValueAt = function (v, out) {
                    var diffAngle = (this._endAngle - this._startAngle) * v;
                    return out = out || __v0, out.x = this._x + this._radius * Math.cos(this._startAngle + diffAngle), out.y = this._y + this._radius * Math.sin(this._startAngle + diffAngle), out
                }, SegmentArc.prototype.trace = function (numPoints, dstArray) {
                    if (numPoints = numPoints || cc.math.path.DEFAULT_TRACE_LENGTH, dstArray = dstArray || [], this._startAngle === this._endAngle || 0 === this._radius)return dstArray;
                    for (var i = 0; numPoints > i; i++)dstArray.push(this.getValueAt(i / numPoints, new Vector));
                    return dstArray
                }, SegmentArc.prototype.getParent = function () {
                    return this._parent
                }, SegmentArc.prototype.setParent = function (s) {
                    this._parent = s
                }, SegmentArc.prototype.clone = function () {
                    return new SegmentArc({x: this._x, y: this._y, radius: this._radius, startAngle: this._startAngle, endAngle: this._endAngle, ccw: this._ccw})
                }, SegmentArc.prototype.getControlPoints = function (arr) {
                    return arr = arr || []
                }, SegmentArc.prototype.setDirty = function () {
                }, SegmentArc
            }();
            path.SegmentArc = SegmentArc
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (math) {
        !function (path) {
            var __v0 = new math.Vector, ContainerSegment = function () {
                function ContainerSegment() {
                    this._parent = null, this._length = 0, this._segments = [], this._dirty = !0
                }

                return ContainerSegment.prototype.getLength = function () {
                    return this._dirty && this.__calculateLength(), this._length
                }, ContainerSegment.prototype.__calculateLength = function () {
                    for (var length = 0, i = 0; i < this._segments.length; i++)length += this._segments[i].getLength();
                    return this._dirty = !1, this._length = length, this._length
                }, ContainerSegment.prototype.getValueAt = function (normalizedPos, out) {
                    this._dirty && (this.__calculateLength(), this._dirty = !1), out = out || __v0;
                    for (var pos = normalizedPos * this._length, search = 0, i = 0; i < this._segments.length; i++) {
                        if (pos >= search && pos < search + this._segments[i].getLength())return search = pos - search, search /= this._segments[i].getLength(), this._segments[i].getValueAt(search, out);
                        search += this._segments[i].getLength()
                    }
                    var ep = this.getEndingPoint();
                    return out.set(ep.x, ep.y)
                }, ContainerSegment.prototype.trace = function (numPoints, dstArray) {
                    dstArray = dstArray || [], numPoints = numPoints || cc.math.path.DEFAULT_TRACE_LENGTH;
                    for (var i = 0; numPoints >= i; i++)dstArray.push(this.getValueAt(i / numPoints, new math.Vector));
                    return dstArray
                }, ContainerSegment.prototype.getStartingPoint = function () {
                    return null
                }, ContainerSegment.prototype.getEndingPoint = function () {
                    return null
                }, ContainerSegment.prototype.getParent = function () {
                    return this._parent
                }, ContainerSegment.prototype.setParent = function (s) {
                    this._parent = s
                }, ContainerSegment.prototype.clone = function () {
                    throw"ContainerSegments can't clone."
                }, ContainerSegment.prototype.getControlPoints = function (arr) {
                    arr = arr || [];
                    for (var i = 0; i < this._segments.length; i++)this._segments[i].getControlPoints(arr);
                    return arr
                }, ContainerSegment.prototype.setDirty = function () {
                    this._dirty = !0;
                    for (var i = 0; i < this._segments.length; i++)this._segments[i].setDirty()
                }, ContainerSegment
            }();
            path.ContainerSegment = ContainerSegment
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (math) {
        !function (path) {
            var Vector = cc.math.Vector, SegmentLine = cc.math.path.SegmentLine, SegmentArc = cc.math.path.SegmentArc, ContainerSegment = cc.math.path.ContainerSegment, SubPath = function (_super) {
                function SubPath() {
                    _super.call(this), this._currentPoint = null, this._closed = !1
                }

                return __extends(SubPath, _super), SubPath.prototype.isClosed = function () {
                    return this._closed
                }, SubPath.prototype.isEmpty = function () {
                    return null === this._currentPoint
                }, SubPath.prototype.numSegments = function () {
                    return this._segments.length
                }, SubPath.prototype.addSegment = function (s) {
                    s.setParent(this), this._segments.push(s)
                }, SubPath.prototype.beginPath = function () {
                    return this._segments = [], this._length = 0, this._currentPoint = null, this._closed = !1, this
                }, SubPath.prototype.moveTo = function (x, y) {
                    return this._closed ? void cc.Debug.warn(cc.locale.WARN_MOVETO_IN_NON_EMPTY_SUBPATH) : (null === this._currentPoint && (this._currentPoint = new Vector), 0 === this.numSegments() && (this._currentPoint.x = x, this._currentPoint.y = y), this)
                }, SubPath.prototype.lineTo = function (x, y) {
                    return this._closed ? void cc.Debug.warn(cc.locale.WARN_TRACE_ON_CLOSED_SUBPATH, "lineTo") : (this.isEmpty() ? this._currentPoint = new Vector : this.addSegment(new SegmentLine({start: {x: this._currentPoint.x, y: this._currentPoint.y}, end: {x: x, y: y}})), this._currentPoint.x = x, this._currentPoint.y = y, this)
                }, SubPath.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise, addLineTo) {
                    if (this._closed)return void cc.Debug.warn(cc.locale.WARN_TRACE_ON_CLOSED_SUBPATH, "ClosePath");
                    var segment = new SegmentArc({x: x, y: y, radius: radius, startAngle: startAngle, endAngle: endAngle, ccw: anticlockwise});
                    if (addLineTo) {
                        var sp = segment.getStartingPoint();
                        this.addSegment(new SegmentLine({start: {x: this._currentPoint.x, y: this._currentPoint.y}, end: {x: sp.x, y: sp.y}}))
                    }
                    this.addSegment(segment);
                    var fp = segment.getEndingPoint();
                    return this._currentPoint.set(fp.x, fp.y), this._dirty = !0, this
                }, SubPath.prototype.closePath = function () {
                    if (this._closed)return void cc.Debug.warn(cc.locale.WARN_TRACE_ON_CLOSED_SUBPATH, "ClosePath");
                    if (this.isEmpty())return void cc.Debug.warn(cc.locale.WARN_CLOSE_EMPTY_SUBPATH, "ClosePath");
                    var p = this.getStartingPoint(), segment = new SegmentLine({start: {x: this._currentPoint.x, y: this._currentPoint.y}, end: {x: p.x, y: p.y}});
                    return this.addSegment(segment), this._currentPoint = segment.getEndingPoint(), this._closed = !0, this._dirty = !0, this
                }, SubPath.prototype.getStartingPoint = function () {
                    return this.isEmpty() ? void cc.Debug.error(cc.locale.ERR_SUBPATH_NOT_STARTED, "getStartingPoint") : this._segments.length ? this._segments[0].getStartingPoint() : this._currentPoint
                }, SubPath.prototype.getEndingPoint = function () {
                    return this.isEmpty() ? void cc.Debug.error(cc.locale.ERR_SUBPATH_NOT_STARTED, "getEndingPoint") : this._segments.length ? this._segments[this._segments.length - 1].getEndingPoint() : this._currentPoint
                }, SubPath.prototype.clone = function () {
                    var sp = new SubPath;
                    sp._currentPoint.set(this._currentPoint.x, this._currentPoint.y), sp._closed = this._closed;
                    for (var i = 0; i < this._segments.length; i++)sp._segments.push(this._segments[i].clone());
                    return sp._length = this._length, sp
                }, SubPath
            }(ContainerSegment);
            path.SubPath = SubPath
        }(math.path || (math.path = {}));
        math.path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (math) {
        var SubPath = cc.math.path.SubPath, ContainerSegment = cc.math.path.ContainerSegment, Vector = cc.math.Vector, Matrix3 = cc.math.Matrix3, __v0 = new Vector, __v1 = new Vector, __v2 = new Vector, __v3 = new Vector, __m0 = null, __m1 = null, Path = function (_super) {
            function Path() {
                _super.call(this), this._currentSubPath = null
            }

            return __extends(Path, _super), Path.prototype.numSubPaths = function () {
                return this._segments.length
            }, Path.prototype.__newSubPath = function () {
                var subpath = new SubPath;
                this._segments.push(subpath), subpath._parent = this, this._currentSubPath = subpath
            }, Path.prototype.isEmpty = function () {
                return 0 === this._segments.length
            }, Path.prototype.__ensureSubPath = function (x, y) {
                "undefined" == typeof x && (x = 0), "undefined" == typeof y && (y = 0), this.isEmpty() && (this.__newSubPath(), this._currentSubPath.moveTo(x, y))
            }, Path.prototype.__chainSubPathIfCurrentIsClosed = function () {
                if (this._currentSubPath.isClosed()) {
                    var pt = this._currentSubPath._currentPoint;
                    this.__newSubPath(), this._currentSubPath.moveTo(pt.x, pt.y)
                }
            }, Path.prototype.getCurrentTracePosition = function () {
                return null === this._currentSubPath ? (cc.Debug.warn(cc.locale.WARN_TRACER_EMPTY, "getCurrentTracePosition"), {x: 0, y: 0}) : this._currentSubPath._currentPoint
            }, Path.prototype.getStartingPoint = function () {
                return null === this._currentSubPath ? (cc.Debug.warn(cc.locale.WARN_TRACER_EMPTY, "getStartingPoint"), __v0.set(0, 0)) : this._currentSubPath.getStartingPoint()
            }, Path.prototype.getEndingPoint = function () {
                return null === this._currentSubPath ? (cc.Debug.warn(cc.locale.WARN_TRACER_EMPTY, "getEndingPoint"), __v0.set(0, 0)) : this._segments[this._segments.length - 1].getEndingPoint()
            }, Path.createFromPoints = function (points) {
                if (!points || 0 === points.length)return null;
                var closedPath = points[0].equals(points[points.length - 1]), path = new Path;
                path.beginPath(), path.moveTo(points[0].x, points[0].y);
                for (var i = 1; i < (closedPath ? points.length - 1 : points.length); i++)path.lineTo(points[i].x, points[i].y);
                return closedPath && path.closePath(), path
            }, Path.prototype.beginPath = function () {
                return this._segments = [], this._length = 0, this._currentSubPath = null, this._dirty = !0, this
            }, Path.prototype.closePath = function () {
                return this._currentSubPath.closePath(), this._dirty = !0, this
            }, Path.prototype.moveTo = function (x, y, matrix) {
                return matrix && (__v0.set(x, y), matrix.transformPoint(__v0), x = __v0.x, y = __v0.y), this.__ensureSubPath(x, y), this._currentSubPath.moveTo(x, y), this
            }, Path.prototype.lineTo = function (x, y, matrix) {
                return matrix && (__v0.set(x, y), matrix.transformPoint(__v0), x = __v0.x, y = __v0.y), this.__ensureSubPath(x, y), this.__chainSubPathIfCurrentIsClosed(), this._currentSubPath.lineTo(x, y), this._dirty = !0, this
            }, Path.prototype.rect = function (x, y, w, h, matrix) {
                return this.__ensureSubPath(), 0 !== this._currentSubPath.numSegments() && this.__newSubPath(), __v0.set(x, y), __v1.set(x + w, y), __v2.set(x + w, y + h), __v3.set(x, y + h), matrix && (matrix.transformPoint(__v0), matrix.transformPoint(__v1), matrix.transformPoint(__v2), matrix.transformPoint(__v3)), this.moveTo(__v0.x, __v0.y), this.lineTo(__v1.x, __v1.y), this.lineTo(__v2.x, __v2.y), this.lineTo(__v3.x, __v3.y), this.closePath(), this.__newSubPath(), this._currentSubPath.moveTo(__v0.x, __v0.y), this._dirty = !0, this
            }, Path.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise, matrix) {
                var addLine = !1;
                __v0.set(x, y), matrix && matrix.transformPoint(__v0), x = __v0.x, y = __v0.y, this.__ensureSubPath(x, y), this._currentSubPath.numSegments() && (addLine = !0);
                var diffAngle = endAngle - startAngle;
                return diffAngle > 2 * Math.PI ? diffAngle = 2 * Math.PI : diffAngle < -2 * Math.PI && (diffAngle = -2 * Math.PI), diffAngle > -1e-4 && 1e-4 > diffAngle ? this : (this.__chainSubPathIfCurrentIsClosed(), __v0.set(0, 0), __v1.set(radius, 0), matrix && (matrix.transformPoint(__v0), matrix.transformPoint(__v1)), radius = Vector.distance(__v0, __v1), .1 >= radius ? (this.__ensureSubPath(x, y), this) : (matrix && (__m0 || (__m0 = new Matrix3), __m1 || (__m1 = new Matrix3), __m0.copy(matrix), __m1.setRotate(startAngle), __m0.multiply(__m1), __v0.set(0, 0), __v1.set(1, 0), __m0.transformPoint(__v0), __m0.transformPoint(__v1), __v1.sub(__v0), startAngle = Math.atan2(__v1.y, __v1.x)), this._currentSubPath.arc(x, y, radius, startAngle, startAngle + diffAngle, anticlockwise, addLine), this._dirty = !0, this))
            }, Path.prototype.clone = function () {
                for (var path = new Path, i = 0; i < this._segments.length; i++)path._segments.push(this._segments[i].clone());
                return path._currentSubPath = path._segments[path._segments.length - 1], path._length = this._length, path
            }, Path
        }(ContainerSegment);
        math.Path = Path
    }(cc.math || (cc.math = {}));
    cc.math
}(cc || (cc = {}));
var cc;
!function (cc) {
    function p(x, y) {
        return new Vector(x, y)
    }

    function c3b(r, g, b) {
        return new cc.math.Color(r / 255, g / 255, b / 255)
    }

    function c4b(r, g, b, a) {
        return new cc.math.Color(r / 255, g / 255, b / 255, a / 255)
    }

    function color(r, g, b, a) {
        return"undefined" == typeof r ? Color.BLACK : "string" == typeof r ? Color.fromStringToColor(r) : "object" == typeof r ? Color.createFromRGBA(r) : new Color(r / 255, g / 255, b / 255, a / 255)
    }

    function animation() {
        return new cc.node.sprite.Animation
    }

    var Color = cc.math.Color, Vector = cc.math.Vector;
    cc.p = p, cc.c3b = c3b, cc.c4b = c4b, cc.color = color, function (Director) {
        function getInstance() {
            return null === directorInstance && (directorInstance = new cc.node.Director), directorInstance
        }

        var directorInstance = null;
        Director.getInstance = getInstance
    }(cc.Director || (cc.Director = {}));
    cc.Director;
    cc.animation = animation, function (Animation) {
        Animation.create = cc.animation
    }(cc.Animation || (cc.Animation = {}));
    cc.Animation
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (_node) {
        var Vector = cc.math.Vector, Rectangle = cc.math.Rectangle, Dimension = cc.math.Dimension, Matrix3 = cc.math.Matrix3, Color = cc.math.Color;
        !function (TransformationDirty) {
            TransformationDirty[TransformationDirty.NONE = 0] = "NONE", TransformationDirty[TransformationDirty.TRANSLATE = 1] = "TRANSLATE", TransformationDirty[TransformationDirty.ROTATE = 7] = "ROTATE", TransformationDirty[TransformationDirty.SCALE = 3] = "SCALE", TransformationDirty[TransformationDirty.ALL = 7] = "ALL", TransformationDirty[TransformationDirty.PARENT = 0] = "PARENT"
        }(_node.TransformationDirty || (_node.TransformationDirty = {}));
        _node.TransformationDirty;
        !function (NodeDirtyFlags) {
            NodeDirtyFlags[NodeDirtyFlags.NONE = 0] = "NONE", NodeDirtyFlags[NodeDirtyFlags.CHILDREN_SORT = 1] = "CHILDREN_SORT"
        }(_node.NodeDirtyFlags || (_node.NodeDirtyFlags = {}));
        var _OrderOfArrival = (_node.NodeDirtyFlags, 0), Node = function () {
            function Node() {
                this._children = [], this._parent = null, this._position = new Vector, this._positionAnchor = new Vector(0, 0), this._rotation = new Vector(0, 0), this._scale = new Vector(1, 1), this._skew = new Vector(0, 0), this._transformationAnchor = new Vector(.5, .5), this._modelViewMatrix = new Matrix3, this._worldModelViewMatrix = new Matrix3, this._color = new Color, this._transformationDirty = 7, this._visible = !0, this._contentSize = new Dimension, this._localZOrder = 0, this._orderOfArrival = 0, this._isAA = !1, this._AABB = new Rectangle, this._BBVertices = [new Vector, new Vector, new Vector, new Vector], this._tag = null, this._name = "", this._flags = 0, this._scene = null, this._actionsToSchedule = []
            }

            return Node.prototype.__childrenMustSort = function () {
                return this._children.length > 1 && 0 !== (1 & this._flags)
            }, Node.prototype.__clearFlag = function (f) {
                this._flags &= ~f
            }, Node.prototype.__setFlag = function (f) {
                this._flags |= f
            }, Node.prototype.setPosition = function (x, y) {
                return(x !== this._position.x || y !== this._position.y) && (this._position.set(x, y), this._transformationDirty |= 1), this
            }, Node.prototype.setRotation = function (x) {
                return(x !== this._rotation.x || x !== this._rotation.y) && (this._rotation.set(x, x), this._transformationDirty |= 7), this
            }, Node.prototype.setScale = function (x, y) {
                return"undefined" == typeof y && (y = x), (x !== this._scale.x || y !== this._scale.y) && (this._scale.set(x, y), this._transformationDirty |= 3), this
            }, Node.prototype.setScaleX = function (s) {
                return s !== this._scale.x && (this._scale.x = s, this._transformationDirty |= 3), this
            }, Node.prototype.setScaleY = function (s) {
                return s !== this._scale.y && (this._scale.y = s, this._transformationDirty |= 3), this
            }, Node.prototype.getParent = function () {
                return this._parent
            }, Node.prototype.__setParent = function (node) {
                return this._parent = node, this
            }, Node.prototype.setPositionAnchor = function (x, y) {
                return this._positionAnchor.set(x, y), this
            }, Node.prototype.setAnchorPoint = function (x, y) {
                return this.setTransformationAnchor(x, y), this.setPositionAnchor(x, y)
            }, Node.prototype.setTransformationAnchor = function (x, y) {
                return this._transformationAnchor.set(x, y), this
            }, Node.prototype.setTag = function (t) {
                return this._tag = t, this
            }, Node.prototype.setOpacity = function (v) {
                return this.setAlpha(v / 255), this
            }, Object.defineProperty(Node.prototype, "alpha", {get: function () {
                return this._color._color[3]
            }, set: function (a) {
                this._color._color[3] = a
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "opacity", {get: function () {
                return 255 * this._color._color[3]
            }, set: function (a) {
                this._color._color[3] = a / 255
            }, enumerable: !0, configurable: !0}), Node.prototype.setAlpha = function (a) {
                return this._color._color[3] = a, this
            }, Node.prototype.getAlpha = function () {
                return this._color._color[3]
            }, Node.prototype.setColor = function (r, g, b) {
                if ("number" == typeof r)this._color._color[0] = r, this._color._color[1] = g, this._color._color[2] = b; else {
                    var c = r;
                    this._color._color[0] = c.r, this._color._color[1] = c.g, this._color._color[2] = c.b
                }
                return this._color._dirty = !0, this
            }, Object.defineProperty(Node.prototype, "rotationAngle", {set: function (v) {
                this._rotation.x = v, this._rotation.y = v, this._transformationDirty |= 7
            }, enumerable: !0, configurable: !0}), Node.prototype.setContentSize = function (w, h) {
                return(w !== this._contentSize.width || h !== this._contentSize.height) && (this._contentSize.set(w, h), this._transformationDirty |= 7), this
            }, Node.prototype.__setTransform = function () {
                return this.__setLocalTransform(), this.__setWorldTransform(), this
            }, Node.prototype.__setLocalTransform = function () {
                0 !== this._transformationDirty && (0 !== this._rotation.x || 7 === this._transformationDirty ? this._modelViewMatrix.setTransformAll(this) : 1 !== this._scale.x || 1 !== this._scale.y || 3 === this._transformationDirty ? this._modelViewMatrix.setTransformScale(this) : this._modelViewMatrix.setTransformTranslate(this))
            }, Node.prototype.__setWorldTransformNotAA = function () {
                var mm, mmm = this._worldModelViewMatrix._matrix, pmm = this._parent._worldModelViewMatrix._matrix;
                mmm[0] = pmm[0], mmm[1] = pmm[1], mmm[2] = pmm[2], mmm[3] = pmm[3], mmm[4] = pmm[4], mmm[5] = pmm[5], this._isAA ? (mm = this._modelViewMatrix._matrix, mmm[2] += mm[2] * mmm[0], mmm[5] += mm[5] * mmm[4]) : this._worldModelViewMatrix.multiply(this._modelViewMatrix)
            }, Node.prototype.__setWorldTransformAA = function () {
                var wmm = this._worldModelViewMatrix._matrix, mmm = this._modelViewMatrix._matrix;
                wmm[0] = mmm[0], wmm[1] = mmm[1], wmm[2] = mmm[2], wmm[3] = mmm[3], wmm[4] = mmm[4], wmm[5] = mmm[5], this._isAA = this._rotation.x % 360 === 0
            }, Node.prototype.__setWorldTransform = function () {
                this._parent ? (this._isAA = this._parent._isAA && this._rotation.x % 360 === 0 && 1 === this._scale.x && 1 === this._scale.y, (0 !== this._transformationDirty || 0 !== this._parent._transformationDirty) && this.__setWorldTransformNotAA()) : 0 !== this._transformationDirty && this.__setWorldTransformAA()
            }, Node.prototype.visit = function (ctx) {
                if (this._visible && (this.__setTransform(), this.__AABBIntersectsScreen(ctx))) {
                    this.__childrenMustSort() && this.__sortChildren();
                    var index = 0;
                    for (index = 0; index < this._children.length; index++) {
                        var child = this._children[index];
                        if (!(child._localZOrder < 0))break;
                        child.visit(ctx)
                    }
                    for (this.__draw(ctx); index < this._children.length; index++) {
                        var child = this._children[index];
                        child.visit(ctx)
                    }
                    this._transformationDirty = 0
                }
            }, Node.prototype.__AABBIntersectsScreen = function (ctx) {
                return this.__calculateBoundingBox(), this._AABB.intersects(0, 0, ctx.canvas.width, ctx.canvas.height)
            }, Node.prototype.__calculateNAABBVertices = function () {
                var vv = this._BBVertices, _w = this._contentSize.width, _h = this._contentSize.height;
                this.convertToWorldSpace(vv[0].set(0, 0)), this.convertToWorldSpace(vv[1].set(_w, 0)), this.convertToWorldSpace(vv[2].set(_w, _h)), this.convertToWorldSpace(vv[3].set(0, _h))
            }, Node.prototype.__calculateAABBVertices = function () {
                var x, y, w, h, vv = this._BBVertices, mm = this._worldModelViewMatrix._matrix;
                x = mm[2], y = mm[5], w = this._contentSize.width * mm[0], h = this._contentSize.height * mm[4], vv[0].set(x, y), vv[1].set(x + w, y), vv[2].set(x + w, y + h), vv[3].set(x, y + h)
            }, Node.prototype.__calculateBoundingBox = function () {
                var vv = this._BBVertices;
                this._isAA ? this.__calculateAABBVertices() : this.__calculateNAABBVertices();
                var xmin, xmax, ymin, ymax;
                return xmin = Math.min(vv[0].x, Math.min(vv[1].x, Math.min(vv[2].x, vv[3].x))), ymin = Math.min(vv[0].y, Math.min(vv[1].y, Math.min(vv[2].y, vv[3].y))), xmax = Math.max(vv[0].x, Math.max(vv[1].x, Math.max(vv[2].x, vv[3].x))), ymax = Math.max(vv[0].y, Math.max(vv[1].y, Math.max(vv[2].y, vv[3].y))), this._AABB.set(xmin, ymin, xmax - xmin, ymax - ymin), this
            }, Node.prototype.convertToWorldSpace = function (p) {
                this._worldModelViewMatrix.transformPoint(p)
            }, Node.prototype.__draw = function (ctx) {
                this._worldModelViewMatrix.setRenderingContextTransform(ctx), this.draw(ctx)
            }, Node.prototype.addChild = function (node, localZOrder) {
                return node._parent && cc.Debug.error(cc.locale.MSG_ERROR_NODE_WITH_PARENT), node._orderOfArrival = _OrderOfArrival++, this._children.push(node), node._parent = this, "undefined" != typeof localZOrder && (node._localZOrder = localZOrder), this.__setFlag(1), this
            }, Node.prototype.reorderChild = function (node, localZOrder) {
                this.__setFlag(1), node._orderOfArrival = _OrderOfArrival++, node._localZOrder = localZOrder
            }, Node.prototype.__sortChildren = function () {
                this._children.sort(function (n0, n1) {
                    return n0._localZOrder < n1._localZOrder ? -1 : n0._localZOrder > n1._localZOrder ? 1 : n0._orderOfArrival < n1._orderOfArrival ? -1 : 1
                }), this.__clearFlag(1)
            }, Node.prototype.removeChild = function (node) {
                var index = this._children.indexOf(node);
                return index >= 0 && (this._children.splice(index, 1), node._parent = null), this
            }, Node.prototype.removeFromParent = function (cleanup) {
                return this._parent ? (this._parent.removeChild(this, cleanup), this) : void cc.Debug.warn(cc.locale.NODE_WARN_REMOVEFROMPARENT_WITH_NO_PARENT)
            }, Node.prototype.removeAllChildren = function () {
                for (var i = 0; i < this._children.length; i++)this._children[i]._parent = null;
                return this._children = [], this
            }, Node.prototype.getChildren = function () {
                return this._children
            }, Node.prototype.getRootNode = function () {
                for (var node = this; node._parent;)node = node._parent;
                return node
            }, Node.prototype.enumerateChildren = function (patternName, callback) {
                if ("string" == typeof patternName) {
                    var node = this, recursive = !1;
                    for (0 === patternName.indexOf("//") && (recursive = !0, patternName = patternName.substr(2), node = this.getRootNode()), -1 !== patternName.indexOf("//") && cc.Debug.error(cc.locale.MSG_WRONG_ENUMERATE_PATTERN), patternName = cc.util.fromPosixRegularExpression(patternName); 0 === patternName.indexOf("/");)node = this.getRootNode(), patternName = patternName.substr(1);
                    for (var orgPatternData = [], patterns = patternName.split("/"), i = 0; i < patterns.length; i++) {
                        var pattern = patterns[i];
                        "*" === pattern && (pattern = ".*"), orgPatternData.push(new RegExp(pattern))
                    }
                    node.__enumerateChildrenImpl(orgPatternData, orgPatternData, callback, recursive)
                }
            }, Node.prototype.__enumerateChildrenImpl = function (orgPatternData, patternData, callback, recursive) {
                if (!patternData.length)return callback(this), void(recursive && this.__enumerateChildrenImpl(orgPatternData, orgPatternData, callback, recursive));
                if ("/../" === patternData[0].toString())return void(this._parent ? this._parent.__enumerateChildrenImpl(orgPatternData, patternData.slice(1, patternData.length), callback, recursive) : cc.Debug.error(cc.locale.MSG_ENUMERATE_UNDERFLOW));
                for (var i = 0; i < this._children.length; i++) {
                    var child = this._children[i];
                    patternData[0].test(child._name) ? child.__enumerateChildrenImpl(orgPatternData, patternData.slice(1, patternData.length), callback, recursive) : recursive && child.__enumerateChildrenImpl(orgPatternData, orgPatternData, callback, recursive)
                }
            }, Node.prototype.draw = function (ctx) {
                ctx.tintColor = cc.math.Color.WHITE, ctx.fillStyle = this._color.getFillStyle(), ctx.fillRect(0, 0, this._contentSize.width, this._contentSize.height)
            }, Node.prototype.setName = function (name) {
                return/[A-Za-z0-9_]+/.test(name) || cc.Debug.error(cc.locale.ERR_NODE_NAME_INVALID), this._name = name, this
            }, Node.prototype.runAction = function (action) {
                return this._scene ? this._scene.scheduleActionForNode(this, action) : this._actionsToSchedule.push(action), this
            }, Node.prototype.setScene = function (scene) {
                this._scene = scene;
                for (var i = 0; i < this._actionsToSchedule.length; i++)scene.scheduleActionForNode(this, this._actionsToSchedule[i]);
                this._actionsToSchedule = []
            }, Node.prototype.setVisible = function (v) {
                v !== this._visible && (this._visible = v, this._transformationDirty = 7)
            }, Node.prototype.attr = function (properties) {
                for (var property in properties)if (properties.hasOwnProperty(property)) {
                    var value = properties[property];
                    this[property] = value
                }
                return this
            }, Object.defineProperty(Node.prototype, "x", {set: function (v) {
                this._position.x = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "y", {set: function (v) {
                this._position.y = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "scaleX", {set: function (v) {
                this._scale.x = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "scaleY", {set: function (v) {
                this._scale.y = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "width", {set: function (v) {
                this._contentSize.width = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "height", {set: function (v) {
                this._contentSize.height = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "rotation", {set: function (v) {
                this._rotation.x = v, this._rotation.y = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "color", {set: function (v) {
                this.setColor(v)
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Node.prototype, "visible", {set: function (v) {
                this.setVisible(v)
            }, enumerable: !0, configurable: !0}), Node
        }();
        _node.Node = Node
    }(cc.node || (cc.node = {}));
    cc.node
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (_action) {
        !function (ActionStates) {
            ActionStates[ActionStates.PAUSED = 1] = "PAUSED", ActionStates[ActionStates.RUNNING = 2] = "RUNNING", ActionStates[ActionStates.CREATED = 3] = "CREATED", ActionStates[ActionStates.ENDED = 4] = "ENDED", ActionStates[ActionStates.RESUMED = 5] = "RESUMED"
        }(_action.ActionStates || (_action.ActionStates = {}));
        var Action = (_action.ActionStates, function () {
            function Action() {
                this._startTime = 0, this._duration = 0, this._currentTime = 0, this._repeatTimes = 1, this._repeatTimesCount = 0, this._currentRepeatCount = 0, this._speed = 1, this._tag = Action.DEFAULT_TAG, this._status = 3, this._onStart = null, this._onEnd = null, this._onRepeat = null, this._onApply = null, this._onPause = null, this._onResume = null, this._interpolator = null, this._fromValuesSet = !1, this._firstExecution = !0, this._delayAfterApplication = 0, this._delayBeforeApplication = 0, this._owner = null, this._chainAction = null, this._relativeAction = !1, this._reversedTime = !1, this._parentSequence = null, this._reversed = !1
            }

            return Action.prototype.setTag = function (tag) {
                return this._tag = tag, this
            }, Action.prototype.update = function () {
            }, Action.prototype.__setOwner = function (owner) {
                return this._owner = owner, this
            }, Action.prototype.getOwner = function () {
                return this._owner
            }, Action.prototype.setDuration = function (duration) {
                return this._duration = duration, this.setDelay(this._delayBeforeApplication), this
            }, Action.prototype.setDelay = function (d) {
                return this._delayBeforeApplication = d, this.__updateDuration(), this
            }, Action.prototype.restart = function () {
                return this._firstExecution = !0, this._repeatTimesCount = 0, this._status = 3, this
            }, Action.prototype.getStatus = function () {
                return this._status
            }, Action.prototype.getSpeed = function () {
                return this._speed
            }, Action.prototype.setSpeed = function (speed) {
                return this._speed = speed, this
            }, Action.prototype.setRepeatTimes = function (repeatTimes, obj) {
                return this._repeatTimes = repeatTimes, this._delayAfterApplication = obj && obj.withDelay || 0, this
            }, Action.prototype.setRepeatForever = function (obj) {
                return this.setRepeatTimes(Number.MAX_VALUE, obj)
            }, Action.prototype.onStart = function (callback) {
                return this._onStart = callback, this
            }, Action.prototype.onEnd = function (callback) {
                return this._onEnd = callback, this
            }, Action.prototype.onRepeat = function (callback) {
                return this._onRepeat = callback, this
            }, Action.prototype.onApply = function (callback) {
                return this._onApply = callback, this
            }, Action.prototype.onPause = function (callback) {
                return this._onPause = callback, this
            }, Action.prototype.onResume = function (callback) {
                return this._onResume = callback, this
            }, Action.prototype.pause = function (target) {
                return this._status = 1, this._onPause && this._onPause(this, target), this
            }, Action.prototype.resume = function () {
                return 1 === this._status && (this._status = 5), this
            }, Action.prototype.getDelayAfterApplication = function () {
                return this._delayAfterApplication
            }, Action.prototype.setDelayAfterApplication = function (d) {
                return this._delayAfterApplication = d, this
            }, Action.prototype.getDelay = function () {
                return this._startTime
            }, Action.prototype.setInterpolator = function (interpolator) {
                return this._interpolator = interpolator, this
            }, Action.prototype.__updateDuration = function () {
                this._startTime = this._delayBeforeApplication + (this._chainAction ? this._chainAction._startTime + this._chainAction.getDuration() : 0), this._parentSequence && this._parentSequence.__updateDuration()
            }, Action.prototype.__normalizeTime = function (time) {
                return time < this._startTime ? time = 0 : (time -= this._startTime, time >= this.getDuration() ? time = 1 : (time %= this.getOneRepetitionDuration(), time < this._duration ? time /= this._duration : time = 1)), this._reversedTime && (time = 1 - time), this._interpolator ? this._interpolator(time) : time
            }, Action.prototype.getDuration = function () {
                return this.getOneRepetitionDuration() * this._repeatTimes
            }, Action.prototype.getOneRepetitionDuration = function () {
                return(this._duration + this._delayAfterApplication) * this._speed
            }, Action.prototype.__isActionApplicable = function (time) {
                return 1 === this._status || 4 === this._status ? !1 : time >= this._startTime && time < this._startTime + this.getDuration()
            }, Action.prototype.step = function (delta, node) {
                this._currentTime += delta, this.__stepImpl(delta, this._currentTime, node)
            }, Action.prototype.__stepImpl = function (delta, time, node) {
                4 !== this._status && (5 === this._status && this._onResume && this._onResume(this, node), this.__isActionApplicable(time) ? this.__actionApply(time, node) : time >= this._startTime + this.getDuration() && (this.__actionApply(time, node), this.stop(node)))
            }, Action.prototype.__actionApply = function (time, node) {
                this._firstExecution && (this._onStart && this._onStart(this, node), this._firstExecution = !1, this.initWithTarget(node)), this._status = 2;
                var ntime = this.__normalizeTime(time), v = this.update(ntime, node);
                if (this._onApply && this._onApply(this, node, v), 1 !== this._repeatTimes) {
                    var repeatIndex = (time - this._startTime) / this.getOneRepetitionDuration() >> 0;
                    repeatIndex !== this._currentRepeatCount && (repeatIndex > this._repeatTimes && (repeatIndex = this._repeatTimes), this._currentRepeatCount = repeatIndex, this._onRepeat && this._onRepeat(this, node, repeatIndex))
                }
            }, Action.prototype.initWithTarget = function () {
            }, Action.prototype.solveInitialValues = function () {
            }, Action.prototype.stop = function (node) {
                this._status = 4, this._onEnd && this._onEnd(this, node)
            }, Action.prototype.isFinished = function () {
                return 4 === this._status
            }, Action.prototype.isPaused = function () {
                return 1 === this._status
            }, Action.prototype.from = function () {
                return this._fromValuesSet = !0, this
            }, Action.prototype.to = function () {
                return this
            }, Action.prototype.timeInfo = function (delay, duration, interpolator) {
                return this.setDelay(delay), this._duration = duration, "undefined" != typeof interpolator && (this._interpolator = interpolator), this
            }, Action.prototype.actionMove = function () {
                return this._parentSequence ? this._parentSequence.actionMove() : this._owner.actionMove()
            }, Action.prototype.actionRotate = function () {
                return this._parentSequence ? this._parentSequence.actionRotate() : this._owner.actionRotate()
            }, Action.prototype.actionScale = function () {
                return this._parentSequence ? this._parentSequence.actionScale() : this._owner.actionScale()
            }, Action.prototype.actionAlpha = function () {
                return this._parentSequence ? this._parentSequence.actionAlpha() : this._owner.actionAlpha()
            }, Action.prototype.actionTint = function () {
                return this._parentSequence ? this._parentSequence.actionTint() : this._owner.actionTint()
            }, Action.prototype.actionProperty = function () {
                return this._parentSequence ? this._parentSequence.actionProperty() : this._owner.actionProperty()
            }, Action.prototype.actionSequence = function () {
                return this._parentSequence ? this._parentSequence.actionSequence() : this._owner.actionSequence()
            }, Action.prototype.endSequence = function () {
                return this._parentSequence ? this._parentSequence.endSequence() : this
            }, Action.prototype.then = function () {
                return this._owner.then()
            }, Action.prototype.setRelative = function (relative) {
                return this._relativeAction = relative, this
            }, Action.prototype.reverse = function () {
                return this.createReversed()
            }, Action.prototype.createReversed = function () {
                var action = this.clone();
                return action.setReversed()
            }, Action.prototype.setReversed = function () {
                return this._reversed = !this._reversed, this._interpolator = this._interpolator ? this._interpolator.reverse() : _action.Interpolator.Linear(!0, !1), this
            }, Action.prototype.__cloneImpl = function () {
                var copy = new Action;
                return this.__genericCloneProperties(copy), copy
            }, Action.prototype.clone = function () {
                return this.__cloneImpl()
            }, Action.prototype.isRelative = function () {
                return this._relativeAction
            }, Action.prototype.__genericCloneProperties = function (copy) {
                copy.setInterpolator(this._interpolator).setReversedTime(this._reversedTime).setRelative(this._relativeAction).timeInfo(this._startTime, this._duration).setDelayAfterApplication(this.getDelayAfterApplication()).__setOwner(this.getOwner()).setInterpolator(this._interpolator).setSpeed(this.getSpeed()).setRepeatTimes(this._repeatTimes), copy._onStart = this._onStart, copy._onEnd = this._onEnd, copy._onApply = this._onApply, copy._onRepeat = this._onRepeat, copy._onPause = this._onPause, copy._onResume = this._onResume, copy._reversed = this._reversed
            }, Action.prototype.easing = function (i) {
                return this.setInterpolator(i), this
            }, Action.prototype.speed = function (speed) {
                return this._speed *= speed, this
            }, Action.prototype.isReversedTime = function () {
                return this._reversedTime
            }, Action.prototype.setReversedTime = function (b) {
                return this._reversedTime = b, this
            }, Action.prototype.__recursivelySetCreatedStatus = function () {
                this._status = 3, this._firstExecution = !0
            }, Action.DEFAULT_TAG = "", Action
        }());
        _action.Action = Action
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (action) {
        var Interpolator = function () {
            function Interpolator() {
            }

            return Interpolator.Linear = function (inverse, pingpong) {
                var fn = function (time) {
                    return pingpong && (.5 > time ? time *= 2 : time = 1 - 2 * (time - .5)), inverse && (time = 1 - time), time
                };
                return fn.reverse = function () {
                    return Interpolator.Linear(!inverse, pingpong)
                }, fn
            }, Interpolator.EaseExponentialIn = function (exponent, inverse, pingpong) {
                var fn = function (time) {
                    return pingpong && (.5 > time ? time *= 2 : time = 1 - 2 * (time - .5)), inverse && (time = 1 - time), Math.pow(time, exponent)
                };
                return fn.reverse = function () {
                    return Interpolator.EaseExponentialIn(exponent, !inverse, pingpong)
                }, fn
            }, Interpolator.EaseExponentialOut = function (exponent, inverse, pingpong) {
                var fn = function (time) {
                    return pingpong && (.5 > time ? time *= 2 : time = 1 - 2 * (time - .5)), inverse && (time = 1 - time), 1 - Math.pow(1 - time, exponent)
                };
                return fn.reverse = function () {
                    return Interpolator.EaseExponentialOut(exponent, !inverse, pingpong)
                }, fn
            }, Interpolator.EaseExponentialInOut = function (exponent, inverse, pingpong) {
                var fn = function (time) {
                    return pingpong && (.5 > time ? time *= 2 : time = 1 - 2 * (time - .5)), inverse && (time = 1 - time), 1 > 2 * time ? Math.pow(2 * time, exponent) / 2 : 1 - Math.abs(Math.pow(2 * time - 2, exponent)) / 2
                };
                return fn.reverse = function () {
                    return Interpolator.EaseExponentialInOut(exponent, !inverse, pingpong)
                }, fn
            }, Interpolator
        }();
        action.Interpolator = Interpolator
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, AlphaAction = function (_super) {
            function AlphaAction(data) {
                _super.call(this), this._originalAlpha = 0, this._startAlpha = 0, this._endAlpha = 0, "undefined" != typeof data && (this._startAlpha = data.start, this._endAlpha = data.end, "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(AlphaAction, _super), AlphaAction.prototype.update = function (delta, node) {
                var r = this._startAlpha + delta * (this._endAlpha - this._startAlpha);
                return this._relativeAction && (r += this._originalAlpha, this._reversed && (r -= this._endAlpha)), node._color._color[3] = r, r
            }, AlphaAction.prototype.solveInitialValues = function () {
                this._relativeAction && !this._fromValuesSet && (this._startAlpha = 0)
            }, AlphaAction.prototype.initWithTarget = function (node) {
                this._originalAlpha = node._color._color[3], this.solveInitialValues(node)
            }, AlphaAction.prototype.from = function (alpha) {
                return _super.prototype.from.call(this, alpha), this._startAlpha = alpha, this
            }, AlphaAction.prototype.to = function (alpha) {
                return this._endAlpha = alpha, this
            }, AlphaAction.prototype.__cloneImpl = function () {
                var copy = new AlphaAction;
                return copy.to(this._endAlpha), this._fromValuesSet && copy.from(this._startAlpha), copy._originalAlpha = this._originalAlpha, this.__genericCloneProperties(copy), copy
            }, AlphaAction
        }(Action);
        action.AlphaAction = AlphaAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, __moveActionUpdateValue = {x: 0, y: 0}, MoveAction = function (_super) {
            function MoveAction(data) {
                _super.call(this), this._originalX = 0, this._originalY = 0, this._x0 = 0, this._y0 = 0, this._x1 = 0, this._y1 = 0, "undefined" != typeof data && (this._x0 = data.x0, this._y0 = data.y0, this._x1 = data.x1, this._y1 = data.y1, "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(MoveAction, _super), MoveAction.prototype.update = function (delta, node) {
                var x = this._x0 + delta * (this._x1 - this._x0), y = this._y0 + delta * (this._y1 - this._y0);
                return this._relativeAction && (x += this._originalX, y += this._originalY, this._reversed && (x -= this._x1, y -= this._y1)), node.setPosition(x, y), __moveActionUpdateValue.x = x, __moveActionUpdateValue.y = y, __moveActionUpdateValue
            }, MoveAction.prototype.solveInitialValues = function (node) {
                this._relativeAction && !this._fromValuesSet ? (this._x0 = 0, this._y0 = 0) : this._fromValuesSet || (this._x0 = node._position.x, this._y0 = node._position.y)
            }, MoveAction.prototype.initWithTarget = function (node) {
                this._originalX = node._position.x, this._originalY = node._position.y, this.solveInitialValues(node)
            }, MoveAction.prototype.from = function (point) {
                return _super.prototype.from.call(this, point), this._x0 = point.x, this._y0 = point.y, this
            }, MoveAction.prototype.to = function (point) {
                return this._x1 = point.x, this._y1 = point.y, this
            }, MoveAction.prototype.__cloneImpl = function () {
                var copy = (new MoveAction).to({x: this._x1, y: this._y1});
                return this._fromValuesSet && copy.from({x: this._x0, y: this._y0}), this.__genericCloneProperties(copy), copy
            }, MoveAction
        }(Action);
        action.MoveAction = MoveAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, PropertyInfo = function () {
            function PropertyInfo(_property, _start, _end) {
                this._property = _property, this._start = _start, this._end = _end, this._original = 0, this._units = ""
            }

            return PropertyInfo.prototype.setOriginal = function (n) {
                return this._original = n, this
            }, PropertyInfo.prototype.getOriginal = function () {
                return this._original
            }, PropertyInfo.prototype.clone = function () {
                return new PropertyInfo(this._property, this._start, this._end)
            }, PropertyInfo.prototype.getValue = function (v) {
                return this._units ? "" + v + this._units : v
            }, PropertyInfo
        }();
        action.PropertyInfo = PropertyInfo;
        var PropertyAction = function (_super) {
            function PropertyAction() {
                _super.call(this), this._propertiesInfo = []
            }

            return __extends(PropertyAction, _super), PropertyAction.prototype.initWithTarget = function (node) {
                for (var i = 0; i < this._propertiesInfo.length; i++) {
                    var pi = this._propertiesInfo[i];
                    pi.setOriginal(node[pi._property])
                }
            }, PropertyAction.prototype.update = function (delta, node) {
                for (var ret = {}, i = 0; i < this._propertiesInfo.length; i++) {
                    var pr = this._propertiesInfo[i], v = pr._start + delta * (pr._end - pr._start);
                    this.isRelative() && (v += pr.getOriginal()), node[pr._property] = pr.getValue(v), this._onApply && (ret[pr._property] = v)
                }
                return ret
            }, PropertyAction.prototype.solveInitialValues = function (node) {
                if (!this._fromValuesSet) {
                    this._fromValuesSet = !0;
                    for (var i = 0; i < this._propertiesInfo.length; i++) {
                        var pr = this._propertiesInfo[i];
                        "undefined" == typeof pr._start && (pr._start = node[pr._property]), "undefined" == typeof pr._end && (pr._end = node[pr._property])
                    }
                }
            }, PropertyAction.prototype.from = function (props) {
                for (var pr in props)if (props.hasOwnProperty(pr)) {
                    var propertyInfo = new PropertyInfo(pr, props[pr]);
                    this._propertiesInfo.push(propertyInfo)
                }
                return this
            }, PropertyAction.prototype.to = function (props) {
                var i;
                for (var pr in props)if (props.hasOwnProperty(pr)) {
                    var property = null;
                    for (i = 0; i < this._propertiesInfo.length; i++)if (this._propertiesInfo[i]._property === pr) {
                        property = this._propertiesInfo[i];
                        break
                    }
                    property || (property = new PropertyInfo(pr, 0, 0), this._propertiesInfo.push(property)), property._end = props[pr]
                }
                return this
            }, PropertyAction.prototype.__cloneProperties = function () {
                for (var pr = [], i = 0; i < this._propertiesInfo.length; i++)pr.push(this._propertiesInfo[i].clone());
                return pr
            }, PropertyAction.prototype.__cloneImpl = function () {
                var copy = (new PropertyAction).to(this.__cloneProperties());
                return this.__genericCloneProperties(copy), copy
            }, PropertyAction
        }(Action);
        action.PropertyAction = PropertyAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, RotateAction = function (_super) {
            function RotateAction(data) {
                _super.call(this), this._originalAngle = 0, this._startAngle = 0, this._endAngle = 360, "undefined" != typeof data && (this._startAngle = data.start, this._endAngle = data.end, "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(RotateAction, _super), RotateAction.prototype.update = function (delta, node) {
                var r = this._startAngle + delta * (this._endAngle - this._startAngle);
                return this._relativeAction && (r += this._originalAngle, this._reversed && (r -= this._endAngle)), node.rotationAngle = r, r
            }, RotateAction.prototype.solveInitialValues = function (node) {
                this._relativeAction && !this._fromValuesSet ? (this._startAngle = 0, this._startAngle === this._endAngle && (this._startAngle = this._originalAngle, this._originalAngle = 0)) : this._fromValuesSet || (this._startAngle = node._rotation.x)
            }, RotateAction.prototype.initWithTarget = function (node) {
                this._originalAngle = node._rotation.x, this.solveInitialValues(node)
            }, RotateAction.prototype.from = function (angle) {
                return _super.prototype.from.call(this, angle), this._startAngle = angle, this
            }, RotateAction.prototype.to = function (angle) {
                return this._endAngle = angle, this
            }, RotateAction.prototype.__cloneImpl = function () {
                var copy = (new RotateAction).to(this._endAngle);
                return this._fromValuesSet && copy.from(this._startAngle), this.__genericCloneProperties(copy), copy
            }, RotateAction
        }(Action);
        action.RotateAction = RotateAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Vector = cc.math.Vector, Action = cc.action.Action, __scaleActionUpdateValue = new Vector, ScaleAction = function (_super) {
            function ScaleAction(data) {
                _super.call(this), this._originalScaleX = 1, this._originalScaleY = 1, this._scaleX0 = 1, this._scaleY0 = 1, this._scaleX1 = 1, this._scaleY1 = 1, "undefined" != typeof data && (this._scaleX0 = data.x0, this._scaleY0 = data.y0, this._scaleX1 = data.x1, this._scaleY1 = data.y1, "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(ScaleAction, _super), ScaleAction.prototype.update = function (delta, node) {
                var x = this._scaleX0 + delta * (this._scaleX1 - this._scaleX0), y = this._scaleY0 + delta * (this._scaleY1 - this._scaleY0);
                return this._relativeAction && (x += this._originalScaleX, y += this._originalScaleY, this._reversed && (x -= this._scaleX1, y -= this._scaleY1)), node.setScale(x, y), __scaleActionUpdateValue.set(x, y)
            }, ScaleAction.prototype.solveInitialValues = function (node) {
                this._relativeAction && !this._fromValuesSet ? (this._scaleX0 = 0, this._scaleY0 = 0) : this._fromValuesSet || (this._scaleX0 = node._scale.x, this._scaleY0 = node._scale.y)
            }, ScaleAction.prototype.initWithTarget = function (node) {
                this._originalScaleX = node._scale.x, this._originalScaleY = node._scale.y, this.solveInitialValues(node)
            }, ScaleAction.prototype.from = function (point) {
                return _super.prototype.from.call(this, point), this._scaleX0 = point.x, this._scaleY0 = point.y, this
            }, ScaleAction.prototype.to = function (point) {
                return this._scaleX1 = point.x, this._scaleY1 = point.y, this
            }, ScaleAction.prototype.__cloneImpl = function () {
                var copy = (new ScaleAction).to({x: this._scaleX1, y: this._scaleY1});
                return this._fromValuesSet && copy.from({x: this._scaleX0, y: this._scaleY0}), this.__genericCloneProperties(copy), copy
            }, ScaleAction
        }(Action);
        action.ScaleAction = ScaleAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (_action) {
        var Action = cc.action.Action, MoveAction = cc.action.MoveAction, RotateAction = cc.action.RotateAction, ScaleAction = cc.action.ScaleAction, PropertyAction = cc.action.PropertyAction, AlphaAction = cc.action.AlphaAction, TintAction = cc.action.TintAction, SequenceAction = function (_super) {
            function SequenceAction(data) {
                _super.call(this), this._actions = [], this._sequential = !0, this._prevOnRepeat = null, "undefined" != typeof data && (this._sequential = data.sequential), this._onRepeat = function (action, target, repetitionCount) {
                    var seq = action;
                    seq.recursivelySetCreatedStatus(), seq._prevOnRepeat && seq._prevOnRepeat(action, target, repetitionCount)
                }
            }

            return __extends(SequenceAction, _super), SequenceAction.prototype.onRepeat = function (callback) {
                return this._prevOnRepeat = callback, this
            }, SequenceAction.prototype.recursivelySetCreatedStatus = function () {
                for (var i = 0; i < this._actions.length; i++)this._actions[i].__recursivelySetCreatedStatus()
            }, SequenceAction.prototype.__recursivelySetCreatedStatus = function () {
                _super.prototype.__recursivelySetCreatedStatus.call(this);
                for (var i = 0; i < this._actions.length; i++)this._actions[i].__recursivelySetCreatedStatus()
            }, SequenceAction.prototype.__updateDuration = function () {
                var duration = 0;
                this.__sequentializeStartAndDuration();
                for (var i = 0; i < this._actions.length; i++) {
                    var nd = this._actions[i]._startTime + this._actions[i].getDuration();
                    nd > duration && (duration = nd)
                }
                this._duration = duration, _super.prototype.__updateDuration.call(this)
            }, SequenceAction.prototype.__sequentializeStartAndDuration = function () {
                var actions = this._actions;
                if (this._sequential)for (var i = 0; i < actions.length; i++) {
                    var curr = actions[i];
                    if (i > 0) {
                        var prev = actions[i - 1];
                        curr._startTime = prev.getDuration() + prev._startTime
                    } else curr._startTime = 0
                }
            }, SequenceAction.prototype.addAction = function (a) {
                return this._actions.push(a), a._owner = this._owner, a._parentSequence = this, this.__updateDuration(), this
            }, SequenceAction.prototype.update = function () {
            }, SequenceAction.prototype.__stepImpl = function (delta, time, node) {
                if (4 !== this._status)if (this.__isActionApplicable(time)) {
                    _super.prototype.__actionApply.call(this, time, node);
                    for (var ntime = (time - this._startTime) % this.getOneRepetitionDuration(), i = 0; i < this._actions.length; i++)this._actions[i]._currentTime = (this._actions[i]._currentTime + delta) % this.getOneRepetitionDuration(), this._actions[i].__stepImpl(delta, ntime, node)
                } else if (time >= this._startTime + this.getDuration()) {
                    this._status = 4;
                    for (var i = 0; i < this._actions.length; i++)this._actions[i]._currentTime = this._actions[i]._currentTime + delta, this._actions[i].__stepImpl(0, time, node);
                    this.__actionApply(time, node), this._onEnd && this._onEnd(this, node)
                }
            }, SequenceAction.prototype.__actionApply = function () {
            }, SequenceAction.prototype.__cloneImpl = function () {
                var action = new SequenceAction({sequential: this._sequential});
                this.__genericCloneProperties(action), action._prevOnRepeat = this._prevOnRepeat, action._duration = 0;
                for (var i = 0; i < this._actions.length; i++)action.addAction(this._actions[i].clone());
                return action
            }, SequenceAction.prototype.getNumActions = function () {
                return this._actions.length
            }, SequenceAction.prototype.getAction = function (i) {
                return this._actions[i]
            }, SequenceAction.prototype.setReversed = function () {
                _super.prototype.setReversed.call(this), this._actions = this._actions.reverse();
                for (var i = 0; i < this._actions.length; i++)this._actions[i].setReversed();
                return this.__sequentializeStartAndDuration(), this
            }, SequenceAction.prototype.actionMove = function () {
                var a = new MoveAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.actionRotate = function () {
                var a = new RotateAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.actionScale = function () {
                var a = new ScaleAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.actionAlpha = function () {
                var a = new AlphaAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.actionTint = function () {
                var a = new TintAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.actionProperty = function () {
                var a = new PropertyAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.actionSequence = function () {
                var a = new SequenceAction;
                return this.addAction(a), a
            }, SequenceAction.prototype.endSequence = function () {
                return this._parentSequence ? this._parentSequence : this
            }, SequenceAction
        }(Action);
        _action.SequenceAction = SequenceAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, __updateRGB = {r: 1, g: 1, b: 1}, TintAction = function (_super) {
            function TintAction(data) {
                _super.call(this), this._originalColor = {r: 1, g: 1, b: 1}, this._startColor = {r: 1, g: 1, b: 1}, this._endColor = {r: 1, g: 1, b: 1}, "undefined" != typeof data && (this._startColor.r = data.r0, this._startColor.g = data.g0, this._startColor.b = data.b0, this._endColor.r = data.r1, this._endColor.g = data.g1, this._endColor.b = data.b1, "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(TintAction, _super), TintAction.prototype.update = function (delta, node) {
                var r = this._startColor.r + delta * (this._endColor.r - this._startColor.r), g = this._startColor.g + delta * (this._endColor.g - this._startColor.g), b = this._startColor.b + delta * (this._endColor.b - this._startColor.b);
                return this._relativeAction && (r += this._originalColor.r, g += this._originalColor.g, b += this._originalColor.b, this._reversed && (r -= this._endColor.r, g -= this._endColor.g, b -= this._endColor.b)), node.setColor(r, g, b), this._onApply && (__updateRGB.r = r, __updateRGB.g = g, __updateRGB.b = b), __updateRGB
            }, TintAction.prototype.solveInitialValues = function (node) {
                this._relativeAction && !this._fromValuesSet ? (this._startColor.r = 0, this._startColor.g = 0, this._startColor.b = 0) : (this._startColor.r = node._color._color[0], this._startColor.g = node._color._color[1], this._startColor.b = node._color._color[2])
            }, TintAction.prototype.initWithTarget = function (node) {
                this._originalColor.r = node._color._color[0], this._originalColor.g = node._color._color[1], this._originalColor.b = node._color._color[2], this.solveInitialValues(node)
            }, TintAction.prototype.from = function (color) {
                return _super.prototype.from.call(this, color), this._startColor = {r: color.r, g: color.g, b: color.b}, this
            }, TintAction.prototype.to = function (color) {
                return this._endColor = {r: color.r, g: color.g, b: color.b}, this
            }, TintAction.prototype.__cloneImpl = function () {
                var copy = new TintAction;
                return copy.to({r: this._endColor.r, g: this._endColor.g, b: this._endColor.b}), this._fromValuesSet && copy.from({r: this._startColor.r, g: this._startColor.g, b: this._startColor.b}), this.__genericCloneProperties(copy), copy
            }, TintAction
        }(Action);
        action.TintAction = TintAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, AnimateAction = function (_super) {
            function AnimateAction(data) {
                _super.call(this), this._originalSpriteFrame = null, this._animation = null, "undefined" != typeof data && this.setAnimation(data)
            }

            return __extends(AnimateAction, _super), AnimateAction.prototype.setAnimation = function (data) {
                this._animation = data, this.setDuration(0), this.setRepeatTimes(data._loops)
            }, AnimateAction.prototype.setDuration = function () {
                return this._animation && _super.prototype.setDuration.call(this, this._animation.getDuration()), this
            }, AnimateAction.prototype.update = function (normalizedTime, target) {
                var index = normalizedTime * (this._animation.getSize() - 1) >> 0;
                return index >= 0 && index < this._animation.getSize() && target.setSpriteFrame(this._animation.getSpriteFrameAtIndex(index)), index
            }, AnimateAction.prototype.getOneRepetitionDuration = function () {
                return(this._animation.getDuration() + this._delayAfterApplication) * this._speed
            }, AnimateAction.prototype.solveInitialValues = function () {
            }, AnimateAction.prototype.initWithTarget = function (node) {
                this._originalSpriteFrame = node._spriteFrame, this.solveInitialValues(node)
            }, AnimateAction.prototype.to = function (a) {
                return this.setAnimation(a), this
            }, AnimateAction.prototype.__cloneImpl = function () {
                var copy = new AnimateAction;
                return copy.to(this._animation.clone()), copy._originalSpriteFrame = this._originalSpriteFrame, this.__genericCloneProperties(copy), copy
            }, AnimateAction.prototype.stop = function (node) {
                _super.prototype.stop.call(this, node), this._animation._restoreOriginalFrame && node.setSpriteFrame(this._originalSpriteFrame)
            }, AnimateAction
        }(Action);
        action.AnimateAction = AnimateAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, __PathActionUpdateValue = {x: 0, y: 0}, PathAction = function (_super) {
            function PathAction(data) {
                _super.call(this), this._originalX = 0, this._originalY = 0, this._segment = null, "undefined" != typeof data && (this._segment = data.segment, "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(PathAction, _super), PathAction.prototype.update = function (delta, node) {
                var pos = this._segment.getValueAt(delta), x = pos.x, y = pos.y;
                if (x += this._originalX, y += this._originalY, this._reversed) {
                    var fp = this._segment.getEndingPoint();
                    x -= fp.x, y -= fp.y
                }
                return node.setPosition(x, y), __PathActionUpdateValue.x = x, __PathActionUpdateValue.y = y, __PathActionUpdateValue
            }, PathAction.prototype.solveInitialValues = function (node) {
                if (!this.isRelative()) {
                    var points = this._segment.getControlPoints();
                    if (points.length) {
                        for (var i = 1; i < points.length; i++)points[i].x -= node._position.x, points[i].y -= node._position.y;
                        points[0].x = 0, points[0].y = 0
                    }
                    this._segment.setDirty(), this._segment.getLength()
                }
            }, PathAction.prototype.initWithTarget = function (node) {
                this._originalX = node._position.x, this._originalY = node._position.y, this.solveInitialValues(node)
            }, PathAction.prototype.from = function (point) {
                return _super.prototype.from.call(this, point), this
            }, PathAction.prototype.to = function () {
                return this
            }, PathAction.prototype.__cloneImpl = function () {
                var copy = new PathAction;
                return copy._segment = this._segment.clone(), this.__genericCloneProperties(copy), copy
            }, PathAction
        }(Action);
        action.PathAction = PathAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (action) {
        var Action = cc.action.Action, Vector = cc.math.Vector, __v0 = new Vector, JumpAction = function (_super) {
            function JumpAction(data) {
                _super.call(this), this._originalX = 0, this._originalY = 0, this._amplitude = 80, this._jumps = 1, this._jumpTo = null, "undefined" != typeof data && (this._amplitude = data.amplitude, this._jumps = data.jumps, this._jumpTo = new Vector(data.position.x, data.position.y), "undefined" != typeof data.relative && this.setRelative(data.relative))
            }

            return __extends(JumpAction, _super), JumpAction.prototype.update = function (delta, node) {
                var frac = delta * this._jumps % 1, y = 4 * this._amplitude * frac * (1 - frac);
                y += this._jumpTo.y * delta;
                var x = this._jumpTo.x * delta;
                return x += this._originalX, y += this._originalY, this._relativeAction && this._reversed && (x -= this._jumpTo.x, y -= this._jumpTo.y), node.setPosition(x, y), __v0.set(x, y)
            }, JumpAction.prototype.solveInitialValues = function () {
            }, JumpAction.prototype.initWithTarget = function (node) {
                this._originalX = node._position.x, this._originalY = node._position.y, this._relativeAction || (this._jumpTo.x -= this._originalX, this._jumpTo.y -= this._originalY), this.solveInitialValues(node)
            }, JumpAction.prototype.__cloneImpl = function () {
                var copy = new JumpAction;
                return copy._amplitude = this._amplitude, copy._jumps = this._jumps, copy._jumpTo = new Vector(this._jumpTo.x, this._jumpTo.y), this.__genericCloneProperties(copy), copy
            }, JumpAction
        }(Action);
        action.JumpAction = JumpAction
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (__action) {
        var SequenceAction = cc.action.SequenceAction, __index = 0, ActionInfo = function () {
            function ActionInfo(_actionManager, _target, _action) {
                this._actionManager = _actionManager, this._target = _target, this._action = _action, this._chain = null
            }

            return ActionInfo.prototype.__action = function (bh) {
                return bh.__setOwner(this._actionManager), null !== this._chain && (bh._chainAction = this._chain._action), this._action = bh, bh.setTag("tag" + __index++), bh
            }, ActionInfo.prototype.action = function (action) {
                var a = this.__action(action);
                return a.setDelay(a._startTime), a
            }, ActionInfo.prototype.actionMove = function () {
                return this.__action(new __action.MoveAction)
            }, ActionInfo.prototype.actionRotate = function () {
                return this.__action(new __action.RotateAction)
            }, ActionInfo.prototype.actionProperty = function () {
                return this.__action(new __action.PropertyAction)
            }, ActionInfo.prototype.actionAlpha = function () {
                return this.__action(new __action.AlphaAction)
            }, ActionInfo.prototype.actionTint = function () {
                return this.__action(new __action.TintAction)
            }, ActionInfo.prototype.actionScale = function () {
                return this.__action(new __action.ScaleAction)
            }, ActionInfo.prototype.actionSequence = function () {
                return this.__action(new SequenceAction)
            }, ActionInfo.prototype.endSequence = function () {
                return this._action._parentSequence
            }, ActionInfo.prototype.step = function (elapsedTime) {
                this._action.step(elapsedTime, this._target)
            }, ActionInfo.prototype.isFinished = function () {
                return this._action.isFinished()
            }, ActionInfo.prototype.pause = function () {
                this._action.pause(this._target)
            }, ActionInfo.prototype.resume = function () {
                this._action.resume()
            }, ActionInfo.prototype.setChain = function (actionInfo) {
                this._chain = actionInfo
            }, ActionInfo.prototype.stop = function () {
                this._action.stop(this._target)
            }, ActionInfo
        }();
        __action.ActionInfo = ActionInfo;
        var ActionManager = function () {
            function ActionManager() {
                this._actionInfos = []
            }

            return ActionManager.prototype.scheduleActionForNode = function (target, action) {
                var tw = new ActionInfo(this, target);
                return tw.action(action), this._actionInfos.push(tw), this
            }, ActionManager.prototype.startChainingActionsForNode = function (target) {
                var ai = new ActionInfo(this, target);
                return this._actionInfos.push(ai), ai
            }, ActionManager.prototype.__newActionInfo = function () {
                var ai = new ActionInfo(this, this._actionInfos[this._actionInfos.length - 1]._target);
                return this._actionInfos.push(ai), ai
            }, ActionManager.prototype.actionMove = function () {
                return this.__newActionInfo().actionMove()
            }, ActionManager.prototype.actionRotate = function () {
                return this.__newActionInfo().actionRotate()
            }, ActionManager.prototype.actionAlpha = function () {
                return this.__newActionInfo().actionAlpha()
            }, ActionManager.prototype.actionTint = function () {
                return this.__newActionInfo().actionTint()
            }, ActionManager.prototype.actionScale = function () {
                return this.__newActionInfo().actionScale()
            }, ActionManager.prototype.actionProperty = function () {
                return this.__newActionInfo().actionProperty()
            }, ActionManager.prototype.actionSequence = function () {
                return this.__newActionInfo().actionSequence()
            }, ActionManager.prototype.then = function () {
                var ltw = this._actionInfos[this._actionInfos.length - 1], tw = this.startChainingActionsForNode(ltw._target);
                return tw.setChain(ltw), tw
            }, ActionManager.prototype.step = function (elapsedTime) {
                var i, someActionsFinished = !1, len = this._actionInfos.length;
                for (i = 0; len > i; i++)this._actionInfos[i].step(elapsedTime), this._actionInfos[i].isFinished() && (someActionsFinished = !0);
                if (someActionsFinished) {
                    var actions = [];
                    for (i = 0; i < this._actionInfos.length; i++)this._actionInfos[i].isFinished() || actions.push(this._actionInfos[i]);
                    this._actionInfos = actions
                }
            }, ActionManager.prototype.pauseAll = function () {
                for (var i = 0; i < this._actionInfos.length; i++)this._actionInfos[i].pause()
            }, ActionManager.prototype.resumeAll = function () {
                for (var i = 0; i < this._actionInfos.length; i++)this._actionInfos[i].resume()
            }, ActionManager.prototype.getNumActions = function () {
                return this._actionInfos.length
            }, ActionManager.prototype.getNumActionsForNode = function (node) {
                for (var count = 0, i = 0; i < this._actionInfos.length; i++)this._actionInfos[i]._target === node && count++;
                return count
            }, ActionManager
        }();
        __action.ActionManager = ActionManager
    }(cc.action || (cc.action = {}));
    cc.action
}(cc || (cc = {}));
var cc;
!function (cc) {
    function animate(animation) {
        return new AnimateAction(animation)
    }

    function callFunc(fn, _this, data) {
        return(new Action).onEnd(function (action, target) {
            "undefined" != typeof _this ? fn.call(_this, target, data) : fn(target, data)
        })
    }

    function show() {
        return(new Action).onEnd(function (action, target) {
            target.setVisible(!action._reversed)
        })
    }

    function toggleVisibility() {
        return(new Action).onEnd(function (action, target) {
            target.setVisible(!target._visible)
        })
    }

    function hide() {
        return(new Action).onEnd(function (action, target) {
            target.setVisible(action._reversed)
        })
    }

    function place(v) {
        return(new Action).onEnd(function (action, target) {
            target.setPosition(v.x, v.y)
        })
    }

    function blink(timeInSecs, blinks) {
        var originalVisibility = !0, action = (new Action).timeInfo(0, 1e3 * timeInSecs).onStart(function (action, node) {
            originalVisibility = node._visible
        }).onEnd(function (action, node) {
            node.setVisible(originalVisibility)
        });
        return action.update = function (delta, node) {
            delta %= 1 / blinks, node.setVisible(delta >= 1 / blinks / 2)
        }, action
    }

    function jumpTo(timeInSecs, pos, amplitude, jumps) {
        return"undefined" == typeof jumps && (jumps = 1), __jump(timeInSecs, pos, amplitude, jumps, !1)
    }

    function jumpBy(timeInSecs, pos, amplitude, jumps) {
        return"undefined" == typeof jumps && (jumps = 1), __jump(timeInSecs, pos, amplitude, jumps, !0)
    }

    function __jump(timeInSecs, pos, amplitude, jumps, relative) {
        return new JumpAction({position: pos, jumps: jumps, amplitude: amplitude, relative: relative}).timeInfo(0, 1e3 * timeInSecs)
    }

    function __bezier(timeInSecs, p, relative) {
        var pa = new PathAction({segment: new SegmentBezier({p0: {x: 0, y: 0}, p1: p[0], p2: p[1], p3: p[2]})}).setRelative(relative).timeInfo(0, 1e3 * timeInSecs);
        return pa
    }

    function bezierTo(timeInSecs, p) {
        return __bezier(timeInSecs, p, !1)
    }

    function bezierBy(timeInSecs, p) {
        return __bezier(timeInSecs, p, !0)
    }

    function __move(timeInSecs, p, relative) {
        return(new MoveAction).to(p).setRelative(relative).timeInfo(0, 1e3 * timeInSecs)
    }

    function moveTo(timeInSecs, p) {
        return __move(timeInSecs, p, !1)
    }

    function moveBy(timeInSecs, p) {
        return __move(timeInSecs, p, !0)
    }

    function __scale(timeInSecs, x, y, relative) {
        return(new ScaleAction).to({x: x, y: y}).setRelative(relative).timeInfo(0, 1e3 * timeInSecs)
    }

    function scaleTo(timeInSecs, x, y) {
        return __scale(timeInSecs, x, "undefined" == typeof y ? x : y, !1)
    }

    function scaleBy(timeInSecs, x, y) {
        return __scale(timeInSecs, x, "undefined" == typeof y ? x : y, !0)
    }

    function __rotate(timeInSecs, a, relative) {
        return(new RotateAction).to(a).setRelative(relative).timeInfo(0, 1e3 * timeInSecs)
    }

    function rotateTo(timeInSecs, a) {
        return __rotate(timeInSecs, a, !1)
    }

    function rotateBy(timeInSecs, a) {
        return __rotate(timeInSecs, a, !0)
    }

    function fadeIn(timeInSecs) {
        return(new AlphaAction).from(0).to(1).timeInfo(0, 1e3 * timeInSecs)
    }

    function fadeOut(timeInSecs) {
        return(new AlphaAction).from(1).to(0).timeInfo(0, 1e3 * timeInSecs)
    }

    function __fade(timeInSecs, a, relative) {
        return(new AlphaAction).to(a).setRelative(relative).timeInfo(0, 1e3 * timeInSecs)
    }

    function fadeTo(timeInSecs, a) {
        return __fade(timeInSecs, a, !1)
    }

    function fadeBy(timeInSecs, a) {
        return __fade(timeInSecs, a, !0)
    }

    function __tint(timeInSecs, r, g, b, relative) {
        return(new TintAction).to({r: r / 255, g: g / 255, b: b / 255}).setRelative(relative).timeInfo(0, 1e3 * timeInSecs)
    }

    function tintTo(timeInSecs, r, g, b) {
        return __tint(timeInSecs, r, g, b, !1)
    }

    function tintBy(timeInSecs, r, g, b) {
        return __tint(timeInSecs, r, g, b, !0)
    }

    function reverseTime(action) {
        return action.setReversedTime(!action.isReversedTime()), this
    }

    function repeat(action, times) {
        return 1 > times && (times = 1), action.setRepeatTimes(times), action
    }

    function repeatForever(action) {
        return action.setRepeatForever(), action
    }

    function delayTime(delayInSecs) {
        return(new PropertyAction).from({}).to({}).timeInfo(0, 1e3 * delayInSecs)
    }

    function __sequence(sequential, actions) {
        var seq = new SequenceAction({sequential: sequential});
        if (!actions.length)return null;
        for (var i = 0; i < actions.length; i++)seq.addAction(actions[i]);
        return seq
    }

    function speed(action, speed) {
        return action.setSpeed(speed), action
    }

    function sequence() {
        for (var actions = [], _i = 0; _i < arguments.length - 0; _i++)actions[_i] = arguments[_i + 0];
        return __sequence(!0, actions)
    }

    function spawn() {
        for (var actions = [], _i = 0; _i < arguments.length - 0; _i++)actions[_i] = arguments[_i + 0];
        return __sequence(!1, actions)
    }

    function easing(action, interpolator) {
        return action.easing(interpolator)
    }

    function easeExponentialIn(action) {
        return easing(action, Interpolator.EaseExponentialIn(2, !1, !1))
    }

    function easeExponentialOut(action) {
        return easing(action, Interpolator.EaseExponentialOut(2, !1, !1))
    }

    function easeExponentialInOut(action) {
        return easing(action, Interpolator.EaseExponentialInOut(2, !1, !1))
    }

    function easeQuadraticActionIn(action) {
        return easing(action, Interpolator.EaseExponentialIn(2, !1, !1))
    }

    function easeQuadraticActionOut(action) {
        return easing(action, Interpolator.EaseExponentialOut(2, !1, !1))
    }

    function easeQuadraticActionInOut(action) {
        return easing(action, Interpolator.EaseExponentialInOut(2, !1, !1))
    }

    function easeCubicActionIn(action) {
        return easing(action, Interpolator.EaseExponentialIn(3, !1, !1))
    }

    function easeCubicActionOut(action) {
        return easing(action, Interpolator.EaseExponentialOut(3, !1, !1))
    }

    function easeCubicActionInOut(action) {
        return easing(action, Interpolator.EaseExponentialInOut(3, !1, !1))
    }

    function easeQuarticlActionIn(action) {
        return easing(action, Interpolator.EaseExponentialIn(4, !1, !1))
    }

    function easeQuarticActionOut(action) {
        return easing(action, Interpolator.EaseExponentialOut(4, !1, !1))
    }

    function easeQuarticActionInOut(action) {
        return easing(action, Interpolator.EaseExponentialInOut(4, !1, !1))
    }

    function easeQuinticlActionIn(action) {
        return easing(action, Interpolator.EaseExponentialIn(5, !1, !1))
    }

    function easeQuinticActionOut(action) {
        return easing(action, Interpolator.EaseExponentialOut(5, !1, !1))
    }

    function easeQuinticActionInOut(action) {
        return easing(action, Interpolator.EaseExponentialInOut(5, !1, !1))
    }

    var Action = cc.action.Action, MoveAction = cc.action.MoveAction, RotateAction = cc.action.RotateAction, PropertyAction = cc.action.PropertyAction, SequenceAction = cc.action.SequenceAction, TintAction = cc.action.TintAction, AlphaAction = cc.action.AlphaAction, ScaleAction = cc.action.ScaleAction, AnimateAction = cc.action.AnimateAction, PathAction = cc.action.PathAction, JumpAction = cc.action.JumpAction, SegmentBezier = cc.math.path.SegmentBezier, Interpolator = cc.action.Interpolator;
    cc.animate = animate, cc.callFunc = callFunc, cc.show = show, cc.toggleVisibility = toggleVisibility, cc.hide = hide, cc.place = place, cc.blink = blink, cc.jumpTo = jumpTo, cc.jumpBy = jumpBy, cc.bezierTo = bezierTo, cc.bezierBy = bezierBy, cc.moveTo = moveTo, cc.moveBy = moveBy, cc.scaleTo = scaleTo, cc.scaleBy = scaleBy, cc.rotateTo = rotateTo, cc.rotateBy = rotateBy, cc.fadeIn = fadeIn, cc.fadeOut = fadeOut, cc.fadeTo = fadeTo, cc.fadeBy = fadeBy, cc.tintTo = tintTo, cc.tintBy = tintBy, cc.reverseTime = reverseTime, cc.repeat = repeat, cc.repeatForever = repeatForever, cc.delayTime = delayTime, cc.__sequence = __sequence, cc.speed = speed, cc.sequence = sequence, cc.spawn = spawn, cc.easing = easing, cc.easeExponentialIn = easeExponentialIn, cc.easeExponentialOut = easeExponentialOut, cc.easeExponentialInOut = easeExponentialInOut, cc.easeQuadraticActionIn = easeQuadraticActionIn, cc.easeQuadraticActionOut = easeQuadraticActionOut, cc.easeQuadraticActionInOut = easeQuadraticActionInOut, cc.easeCubicActionIn = easeCubicActionIn, cc.easeCubicActionOut = easeCubicActionOut, cc.easeCubicActionInOut = easeCubicActionInOut, cc.easeQuarticlActionIn = easeQuarticlActionIn, cc.easeQuarticActionOut = easeQuarticActionOut, cc.easeQuarticActionInOut = easeQuarticActionInOut, cc.easeQuinticlActionIn = easeQuinticlActionIn, cc.easeQuinticActionOut = easeQuinticActionOut, cc.easeQuinticActionInOut = easeQuinticActionInOut
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (BezierTo) {
        BezierTo.create = cc.bezierTo
    }(cc.BezierTo || (cc.BezierTo = {}));
    cc.BezierTo;
    !function (BezierBy) {
        BezierBy.create = cc.bezierBy
    }(cc.BezierBy || (cc.BezierBy = {}));
    cc.BezierBy;
    !function (MoveTo) {
        MoveTo.create = cc.moveTo
    }(cc.MoveTo || (cc.MoveTo = {}));
    cc.MoveTo;
    !function (MoveBy) {
        MoveBy.create = cc.moveBy
    }(cc.MoveBy || (cc.MoveBy = {}));
    cc.MoveBy;
    !function (ScaleTo) {
        ScaleTo.create = cc.scaleTo
    }(cc.ScaleTo || (cc.ScaleTo = {}));
    cc.ScaleTo;
    !function (ScaleBy) {
        ScaleBy.create = cc.scaleBy
    }(cc.ScaleBy || (cc.ScaleBy = {}));
    cc.ScaleBy;
    !function (RotateTo) {
        RotateTo.create = cc.rotateTo
    }(cc.RotateTo || (cc.RotateTo = {}));
    cc.RotateTo;
    !function (RotateBy) {
        RotateBy.create = cc.rotateBy
    }(cc.RotateBy || (cc.RotateBy = {}));
    cc.RotateBy;
    !function (FadeIn) {
        FadeIn.create = cc.fadeIn
    }(cc.FadeIn || (cc.FadeIn = {}));
    cc.FadeIn;
    !function (FadeOut) {
        FadeOut.create = cc.fadeOut
    }(cc.FadeOut || (cc.FadeOut = {}));
    cc.FadeOut;
    !function (FadeTo) {
        FadeTo.create = cc.fadeTo
    }(cc.FadeTo || (cc.FadeTo = {}));
    cc.FadeTo;
    !function (FadeBy) {
        FadeBy.create = cc.fadeBy
    }(cc.FadeBy || (cc.FadeBy = {}));
    cc.FadeBy;
    !function (TintTo) {
        TintTo.create = cc.tintTo
    }(cc.TintTo || (cc.TintTo = {}));
    cc.TintTo;
    !function (TintBy) {
        TintBy.create = cc.tintBy
    }(cc.TintBy || (cc.TintBy = {}));
    cc.TintBy;
    !function (ReverseTime) {
        ReverseTime.create = cc.reverseTime
    }(cc.ReverseTime || (cc.ReverseTime = {}));
    cc.ReverseTime;
    !function (Repeat) {
        Repeat.create = cc.repeat
    }(cc.Repeat || (cc.Repeat = {}));
    cc.Repeat;
    !function (RepeatForever) {
        RepeatForever.create = cc.repeatForever
    }(cc.RepeatForever || (cc.RepeatForever = {}));
    cc.RepeatForever;
    !function (DelayTime) {
        DelayTime.create = cc.delayTime
    }(cc.DelayTime || (cc.DelayTime = {}));
    cc.DelayTime;
    !function (Speed) {
        Speed.create = cc.speed
    }(cc.Speed || (cc.Speed = {}));
    cc.Speed;
    !function (Sequence) {
        Sequence.create = cc.sequence
    }(cc.Sequence || (cc.Sequence = {}));
    cc.Sequence;
    !function (Spawn) {
        Spawn.create = cc.spawn
    }(cc.Spawn || (cc.Spawn = {}));
    cc.Spawn;
    !function (Easing) {
        Easing.create = cc.easing
    }(cc.Easing || (cc.Easing = {}));
    cc.Easing;
    !function (EaseExponentialIn) {
        EaseExponentialIn.create = cc.easeExponentialIn
    }(cc.EaseExponentialIn || (cc.EaseExponentialIn = {}));
    cc.EaseExponentialIn;
    !function (EaseExponentialOut) {
        EaseExponentialOut.create = cc.easeExponentialOut
    }(cc.EaseExponentialOut || (cc.EaseExponentialOut = {}));
    cc.EaseExponentialOut;
    !function (EaseExponentialInOut) {
        EaseExponentialInOut.create = cc.easeExponentialInOut
    }(cc.EaseExponentialInOut || (cc.EaseExponentialInOut = {}));
    cc.EaseExponentialInOut;
    !function (EaseQuadraticActionIn) {
        EaseQuadraticActionIn.create = cc.easeQuadraticActionIn
    }(cc.EaseQuadraticActionIn || (cc.EaseQuadraticActionIn = {}));
    cc.EaseQuadraticActionIn;
    !function (EaseQuadraticActionOut) {
        EaseQuadraticActionOut.create = cc.easeQuadraticActionOut
    }(cc.EaseQuadraticActionOut || (cc.EaseQuadraticActionOut = {}));
    cc.EaseQuadraticActionOut;
    !function (EaseQuadraticActionInOut) {
        EaseQuadraticActionInOut.create = cc.easeQuadraticActionInOut
    }(cc.EaseQuadraticActionInOut || (cc.EaseQuadraticActionInOut = {}));
    cc.EaseQuadraticActionInOut;
    !function (EaseCubicActionIn) {
        EaseCubicActionIn.create = cc.easeCubicActionIn
    }(cc.EaseCubicActionIn || (cc.EaseCubicActionIn = {}));
    cc.EaseCubicActionIn;
    !function (EaseCubicActionOut) {
        EaseCubicActionOut.create = cc.easeCubicActionOut
    }(cc.EaseCubicActionOut || (cc.EaseCubicActionOut = {}));
    cc.EaseCubicActionOut;
    !function (EaseCubicInOut) {
        EaseCubicInOut.create = cc.easeCubicActionInOut
    }(cc.EaseCubicInOut || (cc.EaseCubicInOut = {}));
    cc.EaseCubicInOut;
    !function (EaseQuarticActionIn) {
        EaseQuarticActionIn.create = cc.easeQuarticlActionIn
    }(cc.EaseQuarticActionIn || (cc.EaseQuarticActionIn = {}));
    cc.EaseQuarticActionIn;
    !function (EaseQuarticActionOut) {
        EaseQuarticActionOut.create = cc.easeQuarticActionOut
    }(cc.EaseQuarticActionOut || (cc.EaseQuarticActionOut = {}));
    cc.EaseQuarticActionOut;
    !function (EaseQuarticActionInOut) {
        EaseQuarticActionInOut.create = cc.easeQuarticActionInOut
    }(cc.EaseQuarticActionInOut || (cc.EaseQuarticActionInOut = {}));
    cc.EaseQuarticActionInOut;
    !function (EaseQuinticActionIn) {
        EaseQuinticActionIn.create = cc.easeQuinticlActionIn
    }(cc.EaseQuinticActionIn || (cc.EaseQuinticActionIn = {}));
    cc.EaseQuinticActionIn;
    !function (EaseQuinticActionOut) {
        EaseQuinticActionOut.create = cc.easeQuinticActionOut
    }(cc.EaseQuinticActionOut || (cc.EaseQuinticActionOut = {}));
    cc.EaseQuinticActionOut;
    !function (EaseQuinticActionInOut) {
        EaseQuinticActionInOut.create = cc.easeQuinticActionInOut
    }(cc.EaseQuinticActionInOut || (cc.EaseQuinticActionInOut = {}));
    cc.EaseQuinticActionInOut;
    !function (CallFunc) {
        CallFunc.create = cc.callFunc
    }(cc.CallFunc || (cc.CallFunc = {}));
    cc.CallFunc;
    !function (Animate) {
        Animate.create = cc.animate
    }(cc.Animate || (cc.Animate = {}));
    cc.Animate;
    !function (Show) {
        Show.create = cc.show
    }(cc.Show || (cc.Show = {}));
    cc.Show;
    !function (Hide) {
        Hide.create = cc.hide
    }(cc.Hide || (cc.Hide = {}));
    cc.Hide;
    !function (Place) {
        Place.create = cc.place
    }(cc.Place || (cc.Place = {}));
    cc.Place;
    !function (ToggleVisibility) {
        ToggleVisibility.create = cc.toggleVisibility
    }(cc.ToggleVisibility || (cc.ToggleVisibility = {}));
    cc.ToggleVisibility;
    !function (JumpTo) {
        JumpTo.create = cc.jumpTo
    }(cc.JumpTo || (cc.JumpTo = {}));
    cc.JumpTo;
    !function (JumpBy) {
        JumpBy.create = cc.jumpBy
    }(cc.JumpBy || (cc.JumpBy = {}));
    cc.JumpBy;
    !function (Blink) {
        Blink.create = cc.blink
    }(cc.Blink || (cc.Blink = {}));
    cc.Blink
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (_node) {
        var Node = cc.node.Node, ActionManager = cc.action.ActionManager, Scene = function (_super) {
            function Scene() {
                _super.call(this), this._actionManager = new ActionManager, this._onEnter = null, this._onExit = null, this._onEnterTransitionDidFinish = null, this._onExitTransitionDidStart = null, this._director = null, this.setPositionAnchor(0, 0)
            }

            return __extends(Scene, _super), Scene.prototype.step = function (delta, ctx) {
                this._actionManager.step(delta), this.visit(ctx)
            }, Scene.prototype.onEnter = function (c) {
                return this._onEnter = c, this
            }, Scene.prototype.onExit = function (c) {
                return this._onExit = c, this
            }, Scene.prototype.onExitTransitionDidStart = function (c) {
                return this._onExitTransitionDidStart = c, this
            }, Scene.prototype.onEnterTransitionDidFinish = function (c) {
                return this._onEnterTransitionDidFinish = c, this
            }, Scene.prototype.callOnEnterTransitionDidFinish = function () {
                this._onEnterTransitionDidFinish && this._onEnterTransitionDidFinish(this)
            }, Scene.prototype.callOnExitTransitionDidStart = function () {
                this._onExitTransitionDidStart && this._onExitTransitionDidStart(this)
            }, Scene.prototype.callOnEnter = function () {
                var scene = this;
                this.enumerateChildren("//*", function (node) {
                    node.setScene(scene)
                }), this._onEnter && this._onEnter(this), this.resetScene()
            }, Scene.prototype.callOnExit = function () {
                this._onExit && this._onExit(this)
            }, Scene.prototype.setScene = function () {
            }, Scene.prototype.setParent = function () {
                return this
            }, Scene.prototype.setDirector = function (node) {
                return this._director = node, this
            }, Scene.prototype.getDirector = function () {
                return this._director
            }, Object.defineProperty(Scene.prototype, "director", {get: function () {
                return this._director
            }, set: function (v) {
                this._director = v
            }, enumerable: !0, configurable: !0}), Scene.prototype.resetScene = function () {
                return this.alpha = 1, this.setScale(1, 1), this.setPositionAnchor(0, 0), this.setTransformationAnchor(.5, .5), this._visible = !0, this
            }, Scene.prototype.scheduleActionForNode = function (node, action) {
                return this._actionManager.scheduleActionForNode(node, action), this
            }, Scene.prototype.clear = function () {
                this.removeAllChildren()
            }, Scene
        }(Node);
        _node.Scene = Scene
    }(cc.node || (cc.node = {}));
    cc.node
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (node) {
        var Node = cc.node.Node, Scene = cc.node.Scene, Debug = cc.Debug, Locale = cc.locale, ActionManager = cc.action.ActionManager;
        !function (DirectorStatus) {
            DirectorStatus[DirectorStatus.CREATED = 0] = "CREATED", DirectorStatus[DirectorStatus.RUNNING = 1] = "RUNNING", DirectorStatus[DirectorStatus.PAUSED = 2] = "PAUSED", DirectorStatus[DirectorStatus.STOPPED = 3] = "STOPPED"
        }(node.DirectorStatus || (node.DirectorStatus = {}));
        var __window = (node.DirectorStatus, window), Director = function (_super) {
            function Director() {
                _super.call(this), this._status = 0, this._renderer = null, this._scenes = [], this._animFrame = null, this._animationInterval = 1e3 / 60, this._currentScene = null, this._exitingScene = null, this._scenesActionManager = new ActionManager, this._prevPerf = 0
            }

            return __extends(Director, _super), Director.prototype.getRenderer = function () {
                return this._renderer
            }, Director.prototype.setRenderer = function (renderer) {
                return this._renderer = renderer, this._contentSize.set(renderer.getContentSize()), this
            }, Director.prototype.pause = function () {
                2 !== this._status && (this.stopAnimation(), this._status = 2)
            }, Director.prototype.resume = function () {
                2 === this._status && this.startAnimation()
            }, Director.prototype.runScene = function (scene, transition) {
                var _this = this;
                return-1 !== this._scenes.indexOf(scene) ? void Debug.error(Locale.ERR_RUNNING_ALREADY_EXISTING_SCENE) : (this._scenes.push(scene), 1 === this._scenes.length && this.startAnimation(), "undefined" != typeof transition ? (this._exitingScene = this._currentScene, transition.initialize(scene, this._currentScene).onDirectorTransitionEnd(function () {
                    _this._exitingScene = null
                })) : (this._currentScene && this._currentScene.callOnExit(), this._exitingScene = null, scene.callOnEnter()), void(this._currentScene = scene))
            }, Director.prototype.pushScene = function (scene) {
                this.runScene(scene)
            }, Director.prototype.popScene = function () {
                if (0 === this._scenes.length)return void Debug.error(Locale.ERR_DIRECTOR_POPSCENE_UNDERFLOW);
                var exitScene = this._scenes.pop();
                exitScene.callOnExit(), this._scenes.length > 0 && (this._currentScene = this._scenes[this._scenes.length - 1], this._currentScene.callOnEnter())
            }, Director.prototype.popToRootScene = function () {
                this.popToSceneStackLevel(1)
            }, Director.prototype.popToSceneStackLevel = function (level) {
                if (level = this._scenes.length - level, 0 >= level)return void Debug.error(Locale.ERR_DIRECTOR_POPSCENE_UNDERFLOW);
                for (; level;)this.popScene(), level--
            }, Director.prototype.startAnimation = function () {
                function raf(perf) {
                    fps++;
                    me.mainLoop(perf), me._animFrame = __window.requestAnimFrame(raf)
                }

                if (1 === this._status)return void Debug.warn(Locale.WARN_START_ANIMATION_ON_RUNNING_DIRECTOR);
                this._status = 1;
                var me = (this.mainLoop.bind(this), this);
                this._animFrame = __window.requestAnimFrame(raf)
            }, Director.prototype.stopAnimation = function () {
                1 === this._status && (this._status = 3, this._animFrame && (__window.cancelAnimFrame(this._animFrame), this._animFrame = -1))
            }, Director.prototype.setAnimationInterval = function (interval) {
                this._animationInterval = interval
            }, Director.prototype.mainLoop = function (perf) {
                if (1 === this._status) {
                    var deltaTime;
                    "undefined" == typeof perf && (perf = (new Date).getTime()), deltaTime = perf - this._prevPerf, deltaTime > 250 && (deltaTime = 250), this._prevPerf = perf;
                    var ctx = this._renderer.getRenderingContext();
                    this.visit(ctx), this._scenesActionManager.step(deltaTime), this._exitingScene && this._exitingScene.step(deltaTime, ctx), this._currentScene.step(deltaTime, ctx), this._renderer.flush && this._renderer.flush()
                }
            }, Director.prototype.createScene = function () {
                var scene = new Scene;
                return scene.setContentSize(this._contentSize.width, this._contentSize.height), scene.setDirector(this), scene
            }, Director.prototype.getWinSize = function () {
                return this._contentSize.clone()
            }, Director
        }(Node);
        node.Director = Director
    }(cc.node || (cc.node = {}));
    cc.node
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        var Texture2D = function () {
            function Texture2D(el) {
                this._webglRenderingContext = null, this._glId = -1, this._textureWidth = 0, this._textureHeight = 0, this._image = null, this._hasMipmaps = !1, this._u0 = 0, this._v0 = 0, this._u1 = 0, this._v1 = 0, this._offsetX = 0, this._offsetY = 0, this._imageWidth = 0, this._imageHeight = 0, this._isLoaded = !1, el && this.initWithElement(el)
            }

            return Texture2D.prototype.initWithElement = function (el) {
                if ("string" == typeof el) {
                    var image = new Image;
                    image.onload = function (me) {
                        return function (e) {
                            me.initWithElement(e.target)
                        }
                    }(this), image.src = el
                } else this._image = el, this._imageWidth = el.width, this._imageHeight = el.height, this._image._textureInfo = this, this._isLoaded = !0
            }, Texture2D.prototype.getPixelsWide = function () {
                return this._imageWidth
            }, Texture2D.prototype.getPixelsHigh = function () {
                return this._imageHeight
            }, Texture2D.prototype.getImage = function () {
                return this._glId ? this._glId : this._image
            }, Texture2D.prototype.isWebGLEnabled = function () {
                return null !== this._glId
            }, Texture2D.prototype.__setAsGLTexture = function (gl) {
                function POT(v) {
                    for (var current = 1; v > current;)current <<= 1;
                    return current
                }

                if (this._webglRenderingContext = gl, gl) {
                    if (-1 !== this._glId)return this._image;
                    this._glId = gl.createTexture();
                    var iw = POT(this._image.width), ih = POT(this._image.height);
                    this._textureWidth = iw, this._textureHeight = ih, gl.bindTexture(gl.TEXTURE_2D, this._glId), gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA), gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, iw, ih, 0, gl.RGBA, gl.UNSIGNED_BYTE, null), gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this._image), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE), this._u1 = this._imageWidth / this._textureWidth, this._v1 = this._imageHeight / this._textureHeight;
                    var c = document.createElement("canvas");
                    return c.width = 1, c.height = 1, this._image = c, c._textureInfo = this, this
                }
            }, Texture2D.prototype.setTexParameters = function (texParams, magFilter, wrapS, wrapT) {
                var gl = this._webglRenderingContext;
                if (gl) {
                    var minFilter;
                    "undefined" == typeof magFilter ? (magFilter = texParams.magFilter, wrapS = texParams.wrapS, wrapT = texParams.wrapT, minFilter = texParams.minFilter) : minFilter = texParams, gl.bindTexture(gl.TEXTURE_2D, this._glId), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT)
                }
            }, Texture2D.prototype.setAntiAliasTexParameters = function () {
                var gl = this._webglRenderingContext;
                gl && (gl.bindTexture(gl.TEXTURE_2D, this._glId), this._hasMipmaps ? gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST) : gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST))
            }, Texture2D.prototype.setAliasTexParameters = function () {
                var gl = this._webglRenderingContext;
                gl && (gl.bindTexture(gl.TEXTURE_2D, this._glId), this._hasMipmaps ? gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST) : gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST))
            }, Texture2D.prototype.generateMipmap = function () {
                var gl = this._webglRenderingContext;
                gl && (gl.bindTexture(gl.TEXTURE_2D, this._glId), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR), gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST), gl.generateMipmap(gl.TEXTURE_2D), this._hasMipmaps = !0)
            }, Texture2D
        }();
        render.Texture2D = Texture2D
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (node) {
        !function (_sprite) {
            var Vector = cc.math.Vector, Rectangle = cc.math.Rectangle, getSpriteFrameName = function () {
                var index = 0;
                return function () {
                    return"frame" + index++
                }
            }(), SpriteFrame = function () {
                function SpriteFrame(_texture, rect) {
                    this._texture = _texture, this._parent = null, this._offset = new Vector, this._rotated = !1, this._rect = null, this._rectgl = new Rectangle, this._framesCache = {}, this._name = null, this._rect = rect ? rect : new Rectangle(0, 0, _texture._imageWidth, _texture._imageHeight), this._name = "root", this._framesCache[this._name] = this
                }

                return SpriteFrame.prototype.createSubSpriteFrame = function (x, y, w, h, name) {
                    var newRect = new Rectangle(x, y, w, h);
                    if (newRect.intersectWith(this._rect), newRect.isEmpty())return null;
                    var sf = new SpriteFrame(this._texture, newRect);
                    return"undefined" == typeof name ? name = getSpriteFrameName() : this._framesCache.hasOwnProperty(name) && (name = getSpriteFrameName(), cc.Debug.warn(cc.locale.WARN_SPRITEFRAME_CREATING_SUBFRAME_WITH_EXISTING_NAME, "new name: " + name)), this._framesCache[name] = sf, sf._name = name, sf._parent = this, sf.setOffset(this._offset.x + this._rect.x, this._offset.y + this._rect.y), sf._framesCache = this._framesCache, sf
                }, SpriteFrame.prototype.setOffset = function (x, y) {
                    this._texture || cc.Debug.error(cc.locale.ERR_SPRITE_FRAME_NO_TEXTURE, "setOffset"), this._rect.contains(x, y) && (this._offset.set(x, y), this.__calculateRectGL())
                }, Object.defineProperty(SpriteFrame.prototype, "rotated", {get: function () {
                    return this._rotated
                }, set: function (v) {
                    this._rotated = v
                }, enumerable: !0, configurable: !0}), SpriteFrame.prototype.__calculateRectGL = function () {
                    this._texture.isWebGLEnabled() && this._rectgl.set(this._offset.x + this._rect.x, this._offset.y + this._rect.y, this._rect.w, this._rect.h).normalizeBy(this._texture._textureWidth, this._texture._textureHeight)
                }, SpriteFrame.prototype.draw = function (ctx, sprite) {
                    var x = 0, y = 0, w = sprite._contentSize.width, h = sprite._contentSize.height, flippedX = sprite.flippedX, flippedY = sprite.flippedY;
                    flippedX && flippedY ? (ctx.translate(w, h), ctx.scale(-1, -1)) : flippedX ? (ctx.translate(w, 0), ctx.scale(-1, 1)) : flippedY && (ctx.translate(0, h), ctx.scale(1, -1)), this._rotated && (ctx.translate(w / 2, h / 2), ctx.rotate(-Math.PI / 2), ctx.translate(-w / 2, -h / 2)), ctx.drawImage(this._texture._image, this._rect.x, this._rect.y, this._rect.w, this._rect.h, x, y, w, h)
                }, SpriteFrame.prototype.getSpriteFrame = function (name) {
                    return this._framesCache.hasOwnProperty(name) ? this._framesCache[name] : null
                }, SpriteFrame.prototype.getSpriteFrames = function (names) {
                    for (var ret = [], i = 0; i < names.length; i++) {
                        var sf = this.getSpriteFrame(names[i]);
                        sf && ret.push(sf)
                    }
                    return ret
                }, SpriteFrame
            }();
            _sprite.SpriteFrame = SpriteFrame
        }(node.sprite || (node.sprite = {}));
        node.sprite
    }(cc.node || (cc.node = {}));
    cc.node
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (node) {
        !function (sprite) {
            var Texture2D = cc.render.Texture2D, AnimationCache = function () {
                function AnimationCache() {
                    this._animations = {}
                }

                return AnimationCache.prototype.addAnimation = function () {
                }, AnimationCache
            }();
            sprite.AnimationCache = AnimationCache;
            var __index = 0, Animation = function () {
                function Animation() {
                    this._frames = [], this._loops = 1, this._restoreOriginalFrame = !1, this._delayPerUnit = 150, this._name = null
                }

                return Animation.prototype.addFrame = function (f) {
                    return this._frames.push(f), this
                }, Animation.prototype.addFrames = function (f) {
                    for (var i = 0; i < f.length; i++)this.addFrame(f[i]);
                    return this
                }, Animation.prototype.setDelayPerUnit = function (d) {
                    return this._delayPerUnit = d, this
                }, Animation.prototype.setLoops = function (l) {
                    return l = 1 > l ? 1 : 0 | l, this._loops = l, this
                }, Animation.prototype.setRestoreOriginalFrame = function (r) {
                    return this._restoreOriginalFrame = r, this
                }, Animation.prototype.addSpriteFrameWithFile = function (f) {
                    var me = this, img = new Image;
                    img.onload = function () {
                        var t2d = new Texture2D(img), sf = new sprite.SpriteFrame(t2d);
                        me.addFrame(sf)
                    }, img.src = f
                }, Animation.prototype.getDuration = function () {
                    return this._delayPerUnit * this._frames.length
                }, Animation.prototype.getSize = function () {
                    return this._frames.length
                }, Animation.prototype.getSpriteFrameAtIndex = function (i) {
                    return this._frames[i]
                }, Animation.prototype.setLoopForever = function () {
                    return this._loops = Number.MAX_VALUE, this
                }, Animation.prototype.clone = function () {
                    var animation = new Animation;
                    return animation._frames = Array.prototype.slice.call(this._frames), animation._delayPerUnit = this._delayPerUnit, animation._loops = this._loops, animation._restoreOriginalFrame = this._restoreOriginalFrame, animation._name = this._name + __index++, animation
                }, Animation.prototype.reverse = function () {
                    return this._frames = this._frames.reverse(), this
                }, Animation
            }();
            sprite.Animation = Animation
        }(node.sprite || (node.sprite = {}));
        node.sprite
    }(cc.node || (cc.node = {}));
    cc.node
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (node) {
        var Node = cc.node.Node, Texture2D = cc.render.Texture2D, SpriteFrame = cc.node.sprite.SpriteFrame, Sprite = function (_super) {
            function Sprite(ddata) {
                if (_super.call(this), this._flippedX = !1, this._flippedY = !1, this._spriteFrame = null, ddata instanceof cc.node.sprite.SpriteFrame)this._spriteFrame = ddata, cc.Debug.warn(cc.locale.WARN_SPRITE_CONSTRUCTOR_DEPRECATED_CALL); else if (ddata instanceof cc.render.Texture2D)this._spriteFrame = new SpriteFrame(ddata, arguments[2]), cc.Debug.warn(cc.locale.WARN_SPRITE_CONSTRUCTOR_DEPRECATED_CALL); else if ("string" == typeof ddata)this.__createFromURL(ddata), cc.Debug.warn(cc.locale.WARN_SPRITE_CONSTRUCTOR_DEPRECATED_CALL); else {
                    var data = ddata;
                    data.texture ? this._spriteFrame = new SpriteFrame(data.texture, data.rect) : data.frame ? this._spriteFrame = data.frame : cc.Debug.warn(cc.locale.ERR_SPRITE_CONSTRUCTOR_PARAM_ERROR)
                }
            }

            return __extends(Sprite, _super), Sprite.prototype.__createFromURL = function (url) {
                var image = new Image, me = this;
                image.onload = function (e) {
                    var img = e.target;
                    me.setSpriteFrame(new SpriteFrame(new Texture2D(img)))
                }, image.src = url
            }, Sprite.prototype.draw = function (ctx) {
                this._spriteFrame && (ctx.tintColor = this._color, this._spriteFrame.draw(ctx, this))
            }, Object.defineProperty(Sprite.prototype, "flippedX", {get: function () {
                return this._flippedX
            }, set: function (v) {
                this._flippedX = v
            }, enumerable: !0, configurable: !0}), Object.defineProperty(Sprite.prototype, "flippedY", {get: function () {
                return this._flippedY
            }, set: function (v) {
                this._flippedY = v
            }, enumerable: !0, configurable: !0}), Sprite.prototype.setSpriteFrame = function (s) {
                s !== this._spriteFrame && (this._spriteFrame = s, this.setContentSize(s._rect.w, s._rect.h))
            }, Sprite
        }(Node);
        node.Sprite = Sprite
    }(cc.node || (cc.node = {}));
    cc.node
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (_transition) {
        var MoveAction = cc.action.MoveAction, Interpolator = cc.action.Interpolator, Transition = function () {
            function Transition(duration) {
                this._transitionCallback = null, this._userTransitionCallback = null, this._duration = 0, this._interpolator = Interpolator.Linear(!1, !1), this._duration = duration
            }

            return Transition.prototype.initialize = function () {
                return this
            }, Transition.prototype.onDirectorTransitionEnd = function (callback) {
                return this._transitionCallback = callback, this
            }, Transition.prototype.onTransitionEnd = function (callback) {
                return this._userTransitionCallback = callback, this
            }, Transition.prototype.setInterpolator = function (i) {
                return this._interpolator = i, this
            }, Transition.prototype.__setupActionCallbacks = function (actionIn, actionOut) {
                var _this = this;
                actionIn.onStart(function (action, target) {
                    target.callOnEnter()
                }), actionIn.onEnd(function (action, target) {
                    _this._transitionCallback && _this._transitionCallback(_this), _this._userTransitionCallback && _this._userTransitionCallback(_this), target.callOnEnterTransitionDidFinish()
                }), actionOut && (actionOut.onStart(function (action, target) {
                    target.callOnExitTransitionDidStart()
                }), actionOut.onEnd(function (action, target) {
                    target.callOnExit(), target._visible = !1
                }))
            }, Transition
        }();
        _transition.Transition = Transition, function (TransitionMoveDirection) {
            TransitionMoveDirection[TransitionMoveDirection.LEFT = 0] = "LEFT", TransitionMoveDirection[TransitionMoveDirection.RIGHT = 1] = "RIGHT", TransitionMoveDirection[TransitionMoveDirection.TOP = 2] = "TOP", TransitionMoveDirection[TransitionMoveDirection.BOTTOM = 3] = "BOTTOM"
        }(_transition.TransitionMoveDirection || (_transition.TransitionMoveDirection = {}));
        var TransitionMove = (_transition.TransitionMoveDirection, function (_super) {
            function TransitionMove(duration, direction) {
                "undefined" == typeof direction && (direction = 0), _super.call(this, duration), this.direction = direction
            }

            return __extends(TransitionMove, _super), TransitionMove.prototype.initialize = function (sceneIn, sceneOut) {
                var actionIn = null, actionOut = null, director = null, _inX = 0, _inY = 0;
                switch (this.direction) {
                    case 0:
                        _inX = -sceneIn._contentSize.width;
                        break;
                    case 1:
                        _inX = sceneIn._contentSize.width;
                        break;
                    case 2:
                        _inY = -sceneIn._contentSize.height;
                        break;
                    case 3:
                        _inY = sceneIn._contentSize.height
                }
                return sceneIn.resetScene().setPosition(_inX, _inY), actionIn = new MoveAction({x0: 0, y0: 0, x1: -_inX, y1: -_inY, relative: !0}).setDuration(this._duration), this._interpolator && actionIn.setInterpolator(this._interpolator), director = sceneIn.getDirector(), director._scenesActionManager.scheduleActionForNode(sceneIn, actionIn), sceneOut && (sceneOut.resetScene(), actionOut = actionIn.clone(), director._scenesActionManager.scheduleActionForNode(sceneOut, actionOut)), this.__setupActionCallbacks(actionIn, actionOut), this
            }, TransitionMove
        }(Transition));
        _transition.TransitionMove = TransitionMove;
        var TransitionSlideInL = function (_super) {
            function TransitionSlideInL(duration) {
                _super.call(this, duration, 0)
            }

            return __extends(TransitionSlideInL, _super), TransitionSlideInL
        }(TransitionMove);
        _transition.TransitionSlideInL = TransitionSlideInL;
        var TransitionSlideInR = function (_super) {
            function TransitionSlideInR(duration) {
                _super.call(this, duration, 1)
            }

            return __extends(TransitionSlideInR, _super), TransitionSlideInR
        }(TransitionMove);
        _transition.TransitionSlideInR = TransitionSlideInR;
        var TransitionSlideInT = function (_super) {
            function TransitionSlideInT(duration) {
                _super.call(this, duration, 2)
            }

            return __extends(TransitionSlideInT, _super), TransitionSlideInT
        }(TransitionMove);
        _transition.TransitionSlideInT = TransitionSlideInT;
        var TransitionSlideInB = function (_super) {
            function TransitionSlideInB(duration) {
                _super.call(this, duration, 3)
            }

            return __extends(TransitionSlideInB, _super), TransitionSlideInB
        }(TransitionMove);
        _transition.TransitionSlideInB = TransitionSlideInB
    }(cc.transition || (cc.transition = {}));
    cc.transition
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (render) {
        !function (shader) {
            var Uniform = function () {
                function Uniform(_name, _type, _value) {
                    this._name = _name, this._type = _type, this._value = _value, this._prevValue = null, this._location = null
                }

                return Uniform.prototype.setLocation = function (l) {
                    this._location = l
                }, Uniform.prototype.updateValue = function (gl) {
                    this._value !== this._prevValue && (gl["uniform" + this._type](this._location, this._value), this._prevValue = this._value)
                }, Uniform.prototype.setValue = function (v) {
                    this._value = v
                }, Uniform.createUniform = function (name, type, value) {
                    return"t" === type ? new TextureUniform(name, type, value) : "m4v" === type ? new MatrixUniform(name, type, value) : new Uniform(name, type, value)
                }, Uniform
            }();
            shader.Uniform = Uniform;
            var TextureUniform = function (_super) {
                function TextureUniform(name, type, value) {
                    _super.call(this, name, type, value)
                }

                return __extends(TextureUniform, _super), TextureUniform.prototype.updateValue = function (gl) {
                    this._value !== TextureUniform._textureId && (gl.activeTexture(gl.TEXTURE0), gl.bindTexture(gl.TEXTURE_2D, this._value), gl.uniform1i(this._location, 0), TextureUniform._textureId = this._value)
                }, TextureUniform._textureId = null, TextureUniform
            }(Uniform);
            shader.TextureUniform = TextureUniform;
            var MatrixUniform = function (_super) {
                function MatrixUniform(name, type, value) {
                    _super.call(this, name, type, value)
                }

                return __extends(MatrixUniform, _super), MatrixUniform.prototype.updateValue = function (gl) {
                    this._value !== this._prevValue && (gl.uniformMatrix4fv(this._location, !1, this._value), this._prevValue = this._value)
                }, MatrixUniform
            }(Uniform);
            shader.MatrixUniform = MatrixUniform
        }(render.shader || (render.shader = {}));
        render.shader
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        !function (shader) {
            var Attribute = function () {
                function Attribute(_name, _location) {
                    this._name = _name, this._location = _location
                }

                return Attribute.prototype.enable = function (gl) {
                    gl.enableVertexAttribArray(this._location)
                }, Attribute.prototype.disable = function (gl) {
                    gl.disableVertexAttribArray(this._location)
                }, Attribute
            }();
            shader.Attribute = Attribute
        }(render.shader || (render.shader = {}));
        render.shader
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        !function (_shader) {
            var Uniform = cc.render.shader.Uniform, Attribute = cc.render.shader.Attribute, AbstractShader = function () {
                function AbstractShader(_gl, shaderDefinition) {
                    this._gl = _gl, this._uniforms = [], this._attributes = [], this._shaderProgram = null, this.__initializeFromShaderDefinition(shaderDefinition)
                }

                return AbstractShader.prototype.enableAttributes = function () {
                    for (var i = 0; i < this._attributes.length; i++)this._attributes[i].enable(this._gl);
                    return this
                }, AbstractShader.prototype.disableAttributes = function () {
                    for (var i = 0; i < this._attributes.length; i++)this._attributes[i].disable(this._gl);
                    return this
                }, AbstractShader.prototype.__initializeFromShaderDefinition = function (shaderDef) {
                    var gl = this._gl;
                    if (this._shaderProgram = gl.createProgram(), gl.attachShader(this._shaderProgram, this.__getShader(this._gl, "x-shader/x-vertex", shaderDef.vertexShader)), gl.attachShader(this._shaderProgram, this.__getShader(this._gl, "x-shader/x-fragment", shaderDef.fragmentShader)), gl.linkProgram(this._shaderProgram), gl.getError() && console.log(gl.getProgramInfoLog(this._shaderProgram)), this._gl.useProgram(this._shaderProgram), shaderDef.uniforms)for (var uniformName in shaderDef.uniforms) {
                        var uniformDef = shaderDef.uniforms[uniformName], type = uniformDef.type, value = uniformDef.value, uniform = Uniform.createUniform(uniformName, type, value);
                        uniform.setLocation(gl.getUniformLocation(this._shaderProgram, uniformName)), "undefined" != typeof value && null !== value && (uniform.setValue(value), uniform.updateValue(gl)), this._uniforms.push(uniform)
                    }
                    if (shaderDef.attributes)for (var i = 0; i < shaderDef.attributes.length; i++) {
                        var attribute = new Attribute(shaderDef.attributes[i], gl.getAttribLocation(this._shaderProgram, shaderDef.attributes[i]));
                        this._attributes.push(attribute)
                    }
                }, AbstractShader.prototype.__getShader = function (gl, type, str) {
                    var shader;
                    if ("x-shader/x-fragment" === type)shader = gl.createShader(gl.FRAGMENT_SHADER); else {
                        if ("x-shader/x-vertex" !== type)return null;
                        shader = gl.createShader(gl.VERTEX_SHADER)
                    }
                    return gl.shaderSource(shader, str), gl.compileShader(shader), gl.getShaderParameter(shader, gl.COMPILE_STATUS) ? shader : (alert(gl.getShaderInfoLog(shader)), null)
                }, AbstractShader.prototype.useProgram = function () {
                    this._shaderProgram !== AbstractShader.GLOBAL_PROGRAM_ID && (this._gl.useProgram(this._shaderProgram), AbstractShader.GLOBAL_PROGRAM_ID = this._shaderProgram, this.enableAttributes())
                }, AbstractShader.prototype.notUseProgram = function () {
                    this._shaderProgram === AbstractShader.GLOBAL_PROGRAM_ID && this.disableAttributes()
                }, AbstractShader.prototype.flushBuffersWithContent = function () {
                }, AbstractShader.prototype.__updateUniformValues = function () {
                    for (var i = 0; i < this._uniforms.length; i++)this._uniforms[i].updateValue(this._gl)
                }, AbstractShader.prototype.findUniform = function (name) {
                    for (var i = 0; i < this._uniforms.length; i++)if (this._uniforms[i]._name === name)return this._uniforms[i];
                    return null
                }, AbstractShader.prototype.findAttribute = function (name) {
                    for (var i = 0; i < this._attributes.length; i++)if (this._attributes[i]._name === name)return this._attributes[i];
                    return null
                }, AbstractShader.prototype.mat4_from_mat3 = function (mat3, __mat4) {
                    return __mat4[0] = mat3[0], __mat4[4] = mat3[1], __mat4[1] = mat3[3], __mat4[5] = mat3[4], __mat4[12] = mat3[2], __mat4[13] = mat3[5], __mat4
                }, AbstractShader.GLOBAL_PROGRAM_ID = null, AbstractShader
            }();
            _shader.AbstractShader = AbstractShader
        }(render.shader || (render.shader = {}));
        render.shader
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (render) {
        !function (shader) {
            var AbstractShader = cc.render.shader.AbstractShader, SolidColorShader = function (_super) {
                function SolidColorShader(gl, ortho) {
                    _super.call(this, gl, {vertexShader: "attribute vec2 aPosition; \nattribute vec4 aColor; \nuniform mat4 uProjection; \nuniform mat4 uTransform; \nvarying vec4 vAttrColor; \nvoid main(void) { \ngl_Position = uProjection * uTransform * vec4( aPosition.x, aPosition.y, 0.0, 1.0 );\nvAttrColor = aColor;\n}\n", fragmentShader: "precision mediump float; \nvarying vec4 vAttrColor;\nvoid main(void) { \n  gl_FragColor = vAttrColor; \n}\n", uniforms: {uProjection: {type: "m4v", value: ortho}, uTransform: {type: "m4v", value: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]}}, attributes: ["aPosition", "aColor"]}), this._uniformProjection = null, this._uniformTransform = null, this._attributePosition = null, this._attributeTexture = null, this._attributeColor = null, this._uniformProjection = this.findUniform("uProjection"), this._uniformTransform = this.findUniform("uTransform"), this._attributePosition = this.findAttribute("aPosition"), this._attributeColor = this.findAttribute("aColor"), SolidColorShader.mat[0] = 1, SolidColorShader.mat[5] = 1, SolidColorShader.mat[10] = 1, SolidColorShader.mat[15] = 1
                }

                return __extends(SolidColorShader, _super), SolidColorShader.prototype.flushBuffersWithContent = function () {
                    this.__updateUniformValues();
                    var gl = this._gl;
                    gl.vertexAttribPointer(this._attributePosition._location, 2, gl.FLOAT, !1, 32, 0), gl.vertexAttribPointer(this._attributeColor._location, 4, gl.FLOAT, !1, 32, 8)
                }, SolidColorShader.mat = new Float32Array(16), SolidColorShader
            }(AbstractShader);
            shader.SolidColorShader = SolidColorShader
        }(render.shader || (render.shader = {}));
        render.shader
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (render) {
        !function (shader) {
            var AbstractShader = cc.render.shader.AbstractShader, TextureShader = function (_super) {
                function TextureShader(gl, ortho) {
                    return _super.call(this, gl, {vertexShader: "attribute vec2 aPosition; \nattribute vec4 aColor; \nattribute vec2 aTexture; \nuniform mat4 uProjection; \nuniform mat4 uTransform; \nvarying vec2 vTextureCoord; \nvarying vec4 vAttrColor; \nvoid main(void) { \ngl_Position = uProjection * uTransform * vec4( aPosition.x, aPosition.y, 0.0, 1.0 );\nvTextureCoord = aTexture;\nvAttrColor = aColor;\n}\n", fragmentShader: "precision mediump float; \nvarying vec2 vTextureCoord; \nuniform sampler2D uTextureSampler; \nvarying vec4 vAttrColor;\nvoid main(void) { \n  vec4 textureColor= texture2D(uTextureSampler, vec2(vTextureCoord)); \n  gl_FragColor = textureColor * vAttrColor; \n}\n", attributes: ["aPosition", "aColor", "aTexture"], uniforms: {uProjection: {type: "m4v", value: ortho}, uTransform: {type: "m4v", value: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]}, uTextureSampler: {type: "t", value: null}}}), this._uniformProjection = null, this._uniformTransform = null, this._uniformTextureSampler = null, this._attributePosition = null, this._attributeTexture = null, this._attributeColor = null, this._uniformTextureSampler = this.findUniform("uTextureSampler"), this._uniformProjection = this.findUniform("uProjection"), this._uniformTransform = this.findUniform("uTransform"), this._attributePosition = this.findAttribute("aPosition"), this._attributeColor = this.findAttribute("aColor"), this._attributeTexture = this.findAttribute("aTexture"), TextureShader.mat[0] = 1, TextureShader.mat[5] = 1, TextureShader.mat[10] = 1, TextureShader.mat[15] = 1, this
                }

                return __extends(TextureShader, _super), TextureShader.prototype.flushBuffersWithContent = function () {
                    this.__updateUniformValues();
                    var gl = this._gl;
                    gl.vertexAttribPointer(this._attributePosition._location, 2, gl.FLOAT, !1, 32, 0), gl.vertexAttribPointer(this._attributeColor._location, 4, gl.FLOAT, !1, 32, 8), gl.vertexAttribPointer(this._attributeTexture._location, 2, gl.FLOAT, !1, 32, 24)
                }, TextureShader.mat = new Float32Array(16), TextureShader
            }(AbstractShader);
            shader.TextureShader = TextureShader
        }(render.shader || (render.shader = {}));
        render.shader
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        !function (shader) {
            var Buffer = function () {
                function Buffer(_gl, _type) {
                    this._gl = _gl, this._type = _type, this._buffer = null, this._prevValue = null, this._buffer = _gl.createBuffer()
                }

                return Buffer.prototype.enableWithValue = function (v) {
                    this._gl.bindBuffer(this._type, this._buffer), this._prevValue !== v && (this._gl.bufferData(this._type, v, this._gl.STREAM_DRAW), this._prevValue = v)
                }, Buffer
            }();
            shader.Buffer = Buffer
        }(render.shader || (render.shader = {}));
        render.shader
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var __extends = this.__extends || function (d, b) {
    function __() {
        this.constructor = d
    }

    for (var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
    __.prototype = b.prototype, d.prototype = new __
}, cc;
!function (cc) {
    !function (render) {
        function dc2d(canvas) {
            var c2d = canvas.getContext("2d"), rc = c2d;
            return rc.flush = function () {
            }, Object.defineProperty(rc, "type", {get: function () {
                return"canvas"
            }, enumerable: !0, configurable: !0}), rc
        }

        var Dimension = cc.math.Dimension, Renderer = function () {
            function Renderer(w, h, surface) {
                this._surface = null, this._renderingContext = null, this._dimension = new Dimension, this._surface = "undefined" != typeof surface ? surface : document.createElement("canvas"), this._surface.width = "undefined" != typeof w ? w : 800, this._surface.height = "undefined" != typeof h ? h : 600, this._dimension.set(w, h)
            }

            return Renderer.prototype.getRenderingContext = function () {
                return this._renderingContext
            }, Renderer.prototype.render = function (node) {
                node.visit(this._renderingContext)
            }, Renderer.prototype.flush = function () {
                this._renderingContext.flush()
            }, Renderer.prototype.getContentSize = function () {
                return this._dimension
            }, Renderer
        }();
        render.Renderer = Renderer;
        var CanvasRenderer = function (_super) {
            function CanvasRenderer(w, h, surface) {
                _super.call(this, w, h, surface), this._renderingContext = dc2d(this._surface)
            }

            return __extends(CanvasRenderer, _super), Object.defineProperty(CanvasRenderer.prototype, "renderingContext", {get: function () {
                return this._renderingContext
            }, enumerable: !0, configurable: !0}), Object.defineProperty(CanvasRenderer.prototype, "canvasContext", {get: function () {
                return this._renderingContext
            }, enumerable: !0, configurable: !0}), CanvasRenderer.prototype.getCanvasContext = function () {
                return this._renderingContext
            }, CanvasRenderer
        }(Renderer);
        render.CanvasRenderer = CanvasRenderer;
        var WebGLRenderer = function (_super) {
            function WebGLRenderer(w, h, surface) {
                _super.call(this, w, h, surface), this._gl = null;
                var drc = new cc.render.DecoratedWebGLRenderingContext(this._surface);
                this._gl = drc._gl, this._renderingContext = drc;
                var gl = this._gl;
                gl && (gl.clearColor(0, 0, 0, 0), gl.disable(gl.DEPTH_TEST), gl.disable(gl.CULL_FACE), gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)), gl.viewport(0, 0, w, h)
            }

            return __extends(WebGLRenderer, _super), WebGLRenderer.prototype.getCanvasContext = function () {
                return this._gl
            }, Object.defineProperty(WebGLRenderer.prototype, "renderingContext", {get: function () {
                return this._renderingContext
            }, enumerable: !0, configurable: !0}), Object.defineProperty(WebGLRenderer.prototype, "canvasContext", {get: function () {
                return this._gl
            }, enumerable: !0, configurable: !0}), WebGLRenderer
        }(Renderer);
        render.WebGLRenderer = WebGLRenderer
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function () {
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        var Matrix3 = cc.math.Matrix3, Color = cc.math.Color, RenderingContextSnapshot = function () {
            function RenderingContextSnapshot() {
                this._globalCompositeOperation = "source-over", this._currentMatrix = new Matrix3, this._globalAlpha = 1, this._miterLimit = 10, this._fillStyle = Color.BLACK, this._parsedFillStyle = Color.BLACK, this._strokeStyle = Color.BLACK, this._parsedStrokeStyle = Color.BLACK, this._tintColor = Color.WHITE, this._lineWidth = 1, this._fontDefinition = "10px sans-serif", this._textBaseline = "alphabetic", this._textAlign = "left", this._currentPath = null, this._clippingStack = []
            }

            return RenderingContextSnapshot.prototype.clone = function () {
                var rcs = new RenderingContextSnapshot;
                return rcs._globalCompositeOperation = this._globalCompositeOperation, rcs._globalAlpha = this._globalAlpha, rcs._currentMatrix.copy(this._currentMatrix), rcs._fillStyle = this._fillStyle, rcs._parsedFillStyle = this._parsedFillStyle, rcs._strokeStyle = this._strokeStyle, rcs._parsedStrokeStyle = this._parsedStrokeStyle, rcs._tintColor = this._tintColor, rcs._lineWidth = this._lineWidth, rcs._miterLimit = this._miterLimit, rcs._fontDefinition = this._fontDefinition, rcs._textBaseline = this._textBaseline, rcs._textAlign = this._textAlign, rcs._clippingStack = this._clippingStack, rcs
            }, RenderingContextSnapshot
        }();
        render.RenderingContextSnapshot = RenderingContextSnapshot
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        var Buffer = cc.render.shader.Buffer, __vv = {x: 0, y: 0}, GeometryBatcher = function () {
            function GeometryBatcher(_gl) {
                this._gl = _gl, this._glDataBuffers = [], this._glIndexBuffers = [], this._currentBuffersIndex = 0, this._dataBuffer = null, this._dataBufferIndex = 0, this._indexBuffer = null, this._indexBufferIndex = 0, this._dataBuffer = new Float32Array(32 * GeometryBatcher.MAX_QUADS), this._indexBuffer = new Uint16Array(6 * GeometryBatcher.MAX_QUADS);
                for (var indexBufferIndex = 0, elementIndex = 0, indexBuffer = this._indexBuffer, i = 0; i < GeometryBatcher.MAX_QUADS; i++)indexBuffer[indexBufferIndex] = elementIndex, indexBuffer[indexBufferIndex + 1] = elementIndex + 1, indexBuffer[indexBufferIndex + 2] = elementIndex + 2, indexBuffer[indexBufferIndex + 3] = elementIndex, indexBuffer[indexBufferIndex + 4] = elementIndex + 2, indexBuffer[indexBufferIndex + 5] = elementIndex + 3, indexBufferIndex += 6, elementIndex += 4;
                this._glDataBuffers.push(new Buffer(this._gl, this._gl.ARRAY_BUFFER)), this._glDataBuffers.push(new Buffer(this._gl, this._gl.ARRAY_BUFFER)), this._glIndexBuffers.push(new Buffer(this._gl, this._gl.ELEMENT_ARRAY_BUFFER)), this._glIndexBuffers.push(new Buffer(this._gl, this._gl.ELEMENT_ARRAY_BUFFER)), this._glDataBuffer = this._glDataBuffers[0], this._glIndexBuffer = this._glIndexBuffers[0]
            }

            return GeometryBatcher.prototype.batchRectWithTexture = function (x, y, w, h, rcs, u0, v0, u1, v1) {
                var tint = rcs._tintColor._color, r = tint[0], g = tint[1], b = tint[2], a = tint[3] * rcs._globalAlpha, cm = rcs._currentMatrix;
                return __vv.x = x, __vv.y = y, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, u0, v0), __vv.x = x + w, __vv.y = y, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, u1, v0), __vv.x = x + w, __vv.y = y + h, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, u1, v1), __vv.x = x, __vv.y = y + h, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, u0, v1), this._indexBufferIndex += 6, this._dataBufferIndex + 32 >= this._dataBuffer.length
            }, GeometryBatcher.prototype.batchRect = function (x, y, w, h, rcs) {
                var color = rcs._parsedFillStyle._color, tint = rcs._tintColor._color, r = color[0] * tint[0], g = color[1] * tint[1], b = color[2] * tint[2], a = color[3] * tint[3] * rcs._globalAlpha, cm = rcs._currentMatrix;
                return __vv.x = x, __vv.y = y, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, 0, 0), __vv.x = x + w, __vv.y = y, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, 0, 0), __vv.x = x + w, __vv.y = y + h, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, 0, 0), __vv.x = x, __vv.y = y + h, this.batchVertex(cm.transformPoint(__vv), r, g, b, a, 0, 0), this._indexBufferIndex += 6, this._dataBufferIndex + 32 >= this._dataBuffer.length
            }, GeometryBatcher.prototype.batchVertex = function (p, r, g, b, a, u, v) {
                this._dataBuffer[this._dataBufferIndex++] = p.x, this._dataBuffer[this._dataBufferIndex++] = p.y, this._dataBuffer[this._dataBufferIndex++] = r, this._dataBuffer[this._dataBufferIndex++] = g, this._dataBuffer[this._dataBufferIndex++] = b, this._dataBuffer[this._dataBufferIndex++] = a, this._dataBuffer[this._dataBufferIndex++] = u, this._dataBuffer[this._dataBufferIndex++] = v
            }, GeometryBatcher.prototype.flush = function (shader) {
                this._indexBufferIndex && (this._glDataBuffer.enableWithValue(this._dataBuffer.subarray(0, this._dataBufferIndex)), this._glIndexBuffer.enableWithValue(this._indexBuffer.subarray(0, this._indexBufferIndex)), shader.flushBuffersWithContent(), this._gl.drawElements(this._gl.TRIANGLES, this._indexBufferIndex, this._gl.UNSIGNED_SHORT, 0), this._dataBufferIndex = 0, this._indexBufferIndex = 0, this._currentBuffersIndex = (this._currentBuffersIndex + 1) % 2, this._glDataBuffer = this._glDataBuffers[this._currentBuffersIndex], this._glIndexBuffer = this._glIndexBuffers[this._currentBuffersIndex])
            }, GeometryBatcher.MAX_QUADS = 8192, GeometryBatcher
        }();
        render.GeometryBatcher = GeometryBatcher
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (render) {
        var Color = cc.math.Color, RenderingContextSnapshot = cc.render.RenderingContextSnapshot, GeometryBatcher = cc.render.GeometryBatcher, SolidColorShader = cc.render.shader.SolidColorShader, TextureShader = cc.render.shader.TextureShader;
        !function (FillStyleType) {
            FillStyleType[FillStyleType.COLOR = 0] = "COLOR", FillStyleType[FillStyleType.IMAGE = 1] = "IMAGE"
        }(render.FillStyleType || (render.FillStyleType = {}));
        render.FillStyleType;
        !function (ShaderType) {
            ShaderType[ShaderType.COLOR = 0] = "COLOR", ShaderType[ShaderType.IMAGE = 1] = "IMAGE"
        }(render.ShaderType || (render.ShaderType = {}));
        render.ShaderType;
        !function (WEBGL_FLAGS) {
            WEBGL_FLAGS[WEBGL_FLAGS.BLEND = 1] = "BLEND", WEBGL_FLAGS[WEBGL_FLAGS.DEPTH_TEST = 2] = "DEPTH_TEST", WEBGL_FLAGS[WEBGL_FLAGS.CULL_FACE = 4] = "CULL_FACE"
        }(render.WEBGL_FLAGS || (render.WEBGL_FLAGS = {}));
        render.WEBGL_FLAGS;
        render.WEBGL_FLAGS_CONSTANTS = {};
        var DecoratedWebGLRenderingContext = function () {
            function DecoratedWebGLRenderingContext(_canvas) {
                function createContext() {
                    var _gl = null;
                    try {
                        var obj = {premultipliedAlpha: DecoratedWebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, antialias: DecoratedWebGLRenderingContext.ANTIALIAS, alpha: DecoratedWebGLRenderingContext.CTX_ALPHA, stencil: !0};
                        _gl = _canvas.getContext("webgl", obj) || _canvas.getContext("experimental-webgl", obj), _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, DecoratedWebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL ? 1 : 0)
                    } catch (e) {
                        alert(e)
                    }
                    if (!_gl)throw new Error("WebGL is not available.");
                    return _gl
                }

                function initializeFlagsMap(_gl) {
                    cc.render.WEBGL_FLAGS_CONSTANTS[1] = _gl.BLEND, cc.render.WEBGL_FLAGS_CONSTANTS[2] = _gl.DEPTH_TEST, cc.render.WEBGL_FLAGS_CONSTANTS[4] = _gl.CULL_FACE
                }

                function initializeContext(_gl) {
                    _gl.clearColor(0, 0, 0, 0), _gl.disable(_gl.DEPTH_TEST), _gl.disable(_gl.CULL_FACE), _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT | _gl.STENCIL_BUFFER_BIT), _gl.viewport(0, 0, _canvas.width, _canvas.height)
                }

                this._canvas = _canvas, this.__mat3 = new cc.math.Matrix3, this._gl = null, this._webglFlags = 0, this._currentContextSnapshot = null, this._contextSnapshots = [], this._currentFillStyle = null, this._currentFillStyleType = 0, this._currentGlobalCompositeOperation = "source-over", this._shaders = [], this._batcher = null, this._gl = createContext(), initializeFlagsMap(this._gl), initializeContext(this._gl), this._batcher = new GeometryBatcher(this._gl), this._currentContextSnapshot = new RenderingContextSnapshot, this._contextSnapshots.push(this._currentContextSnapshot), this.__createRenderingShaders(_canvas.width, _canvas.height), this.__setGlobalCompositeOperation()
            }

            return DecoratedWebGLRenderingContext.prototype.__createRenderingShaders = function (w, h) {
                function createOrthographicProjectionMatrix(left, right, bottom, top, znear, zfar) {
                    var tx = -(right + left) / (right - left), ty = -(top + bottom) / (top - bottom), tz = -(zfar + znear) / (zfar - znear);
                    return new Float32Array([2 / (right - left), 0, 0, 0, 0, 2 / (top - bottom), 0, 0, 0, 0, -2 / (zfar - znear), 0, tx, ty, tz, 1])
                }

                var opm = createOrthographicProjectionMatrix(0, w, h, 0, -1, 1);
                this._shaders.push(new SolidColorShader(this._gl, opm)), this._shaders.push(new TextureShader(this._gl, opm)), this._shaders[0].useProgram()
            }, Object.defineProperty(DecoratedWebGLRenderingContext.prototype, "canvas", {get: function () {
                return this._canvas
            }, enumerable: !0, configurable: !0}), Object.defineProperty(DecoratedWebGLRenderingContext.prototype, "fillStyle", {get: function () {
                return this._currentContextSnapshot._fillStyle
            }, set: function (fs) {
                this._currentFillStyle = fs
            }, enumerable: !0, configurable: !0}), Object.defineProperty(DecoratedWebGLRenderingContext.prototype, "tintColor", {set: function (c) {
                this._currentContextSnapshot._tintColor = c
            }, enumerable: !0, configurable: !0}), Object.defineProperty(DecoratedWebGLRenderingContext.prototype, "globalCompositeOperation", {get: function () {
                return this._currentGlobalCompositeOperation
            }, set: function (gco) {
                this._currentGlobalCompositeOperation = gco
            }, enumerable: !0, configurable: !0}), DecoratedWebGLRenderingContext.prototype.__enable = function (v) {
                this._webglFlags & v || (this._gl.enable(cc.render.WEBGL_FLAGS_CONSTANTS[v]), this._webglFlags |= v)
            }, DecoratedWebGLRenderingContext.prototype.__disable = function (v) {
                this._webglFlags & v && (this._gl.disable(cc.render.WEBGL_FLAGS_CONSTANTS[v]), this._webglFlags &= ~v)
            }, DecoratedWebGLRenderingContext.prototype.__setGlobalCompositeOperation = function () {
                var gl = this._gl;
                switch (this.__enable(1), this._currentGlobalCompositeOperation) {
                    case"source-over":
                        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case"source-out":
                        gl.blendFunc(gl.ONE_MINUS_DST_ALPHA, gl.ZERO);
                        break;
                    case"source-in":
                        gl.blendFunc(gl.DST_ALPHA, gl.ZERO);
                        break;
                    case"source-atop":
                        gl.blendFunc(gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case"destination-over":
                        gl.blendFunc(gl.ONE_MINUS_DST_ALPHA, gl.DST_ALPHA);
                        break;
                    case"destination-in":
                        gl.blendFunc(gl.ZERO, gl.SRC_ALPHA);
                        break;
                    case"destination-out":
                        gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case"destination-atop":
                        gl.blendFunc(gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA);
                        break;
                    case"multiply":
                        gl.blendFunc(gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case"screen":
                        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_COLOR);
                        break;
                    case"copy":
                        gl.blendFunc(gl.ONE, gl.ZERO);
                        break;
                    case"lighter":
                        gl.blendFunc(gl.ONE, gl.ONE);
                        break;
                    case"darker":
                        gl.blendFunc(gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case"xor":
                        gl.blendFunc(gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
                        break;
                    case"add":
                        gl.blendFunc(gl.SRC_ALPHA, gl.DST_ALPHA);
                        break;
                    default:
                        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
                }
                this._currentContextSnapshot._globalCompositeOperation = this._currentGlobalCompositeOperation
            }, DecoratedWebGLRenderingContext.prototype.setTransform = function (a, b, c, d, tx, ty) {
                this._currentContextSnapshot._currentMatrix.setTransform(a, b, c, d, tx, ty)
            }, DecoratedWebGLRenderingContext.prototype.transform = function (a, b, c, d, tx, ty) {
                this._currentContextSnapshot._currentMatrix.transform(a, b, c, d, tx, ty)
            }, DecoratedWebGLRenderingContext.prototype.fillRect = function (x, y, w, h) {
                0 >= w || 0 >= h || (this._currentFillStyle !== this._currentContextSnapshot._fillStyle && this.__fillFlushIfNeeded(), this._batcher.batchRect(x, y, w, h, this._currentContextSnapshot) && this.flush())
            }, DecoratedWebGLRenderingContext.prototype.drawImage = function (img, sx, sy, sw, sh, dx, dy, dw, dh) {
                var ti = img._textureInfo, textureId = ti._glId;
                img._textureInfo && -1 !== textureId || (console.log(" --- lazy image to texture call."), new cc.render.Texture2D(img).__setAsGLTexture(this._gl), textureId = img._textureInfo._glId), this.__drawImageFlushIfNeeded(textureId);
                var _sx, _sy, _sw, _sh, _dx, _dy, _dw, _dh;
                arguments.length >= 9 ? (_sx = (sx + ti._offsetX) / ti._textureWidth, _sy = (sy + ti._offsetY) / ti._textureHeight, _sw = (sx + sw + ti._offsetX) / ti._textureWidth, _sh = (sy + sh + ti._offsetY) / ti._textureHeight, _dx = dx, _dy = dy, _dw = dw, _dh = dh) : arguments.length >= 5 ? (_dx = sx, _dy = sy, _dw = sw, _dh = sh, _sx = ti._u0, _sy = ti._v0, _sw = ti._u1, _sh = ti._v1) : (_dx = sx, _dy = sy, _dw = ti._imageWidth, _dh = ti._imageHeight, _sx = ti._u0, _sy = ti._v0, _sw = ti._u1, _sh = ti._v1), this._batcher.batchRectWithTexture(_dx, _dy, _dw, _dh, this._currentContextSnapshot, _sx, _sy, _sw, _sh, textureId) && this.flush()
            }, DecoratedWebGLRenderingContext.prototype.translate = function (x, y) {
                this._currentContextSnapshot._currentMatrix.multiply(this.__mat3.setTranslate(x, y))
            }, DecoratedWebGLRenderingContext.prototype.rotate = function (angle) {
                this._currentContextSnapshot._currentMatrix.multiply(this.__mat3.setRotate(angle))
            }, DecoratedWebGLRenderingContext.prototype.scale = function (x, y) {
                this._currentContextSnapshot._currentMatrix.multiply(this.__mat3.setScale(x, y))
            }, DecoratedWebGLRenderingContext.prototype.flush = function () {
                this._batcher.flush(this._shaders[this._currentFillStyleType])
            }, Object.defineProperty(DecoratedWebGLRenderingContext.prototype, "type", {get: function () {
                return"webgl"
            }, enumerable: !0, configurable: !0}), DecoratedWebGLRenderingContext.prototype.__fillFlushIfNeeded = function () {
                var inferredFillStyleType, inferredFillStyle;
                this._currentFillStyle !== this._currentContextSnapshot._fillStyle && ("string" == typeof this._currentFillStyle ? (inferredFillStyleType = 0, inferredFillStyle = cc.math.Color.createFromRGBA(this._currentFillStyle)) : this._currentFillStyle instanceof Color ? (inferredFillStyle = this._currentFillStyle, inferredFillStyleType = 0) : (inferredFillStyleType = 0, inferredFillStyle = Color.MAGENTA), inferredFillStyleType !== this._currentFillStyleType && (this.flush(), this.__setCurrentFillStyleType(inferredFillStyleType)), this._currentContextSnapshot._parsedFillStyle = inferredFillStyle), this.__compositeFlushIfNeeded()
            }, DecoratedWebGLRenderingContext.prototype.__drawImageFlushIfNeeded = function (textureId) {
                if (1 !== this._currentFillStyleType) {
                    this.flush(), this.__setCurrentFillStyleType(1);
                    var ts = this._shaders[1];
                    ts._uniformTextureSampler.setValue(textureId), cc.render.shader.TextureUniform._textureId !== textureId && ts._uniformTextureSampler.updateValue(this._gl)
                } else {
                    cc.render.shader.TextureUniform._textureId !== textureId && this.flush();
                    var ts = this._shaders[1];
                    ts._uniformTextureSampler.setValue(textureId), this.__compositeFlushIfNeeded()
                }
            }, DecoratedWebGLRenderingContext.prototype.__compositeFlushIfNeeded = function () {
                this._currentGlobalCompositeOperation !== this._currentContextSnapshot._globalCompositeOperation && (this.flush(), this.__setGlobalCompositeOperation())
            }, DecoratedWebGLRenderingContext.prototype.__setCurrentFillStyleType = function (f) {
                this._shaders[this._currentFillStyleType].notUseProgram(), this._currentFillStyleType = f, this._shaders[f].useProgram()
            }, DecoratedWebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL = !1, DecoratedWebGLRenderingContext.ANTIALIAS = !1, DecoratedWebGLRenderingContext.CTX_ALPHA = !1, DecoratedWebGLRenderingContext
        }();
        render.DecoratedWebGLRenderingContext = DecoratedWebGLRenderingContext
    }(cc.render || (cc.render = {}));
    cc.render
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (util) {
        function FloatArray(size, defaultValue) {
            var a, i;
            if (defaultValue = defaultValue || 0, "undefined" != typeof Float32Array) {
                if (a = new Float32Array(size), defaultValue)for (i = 0; size > i; i++)a[i] = defaultValue
            } else for (a = new Array(size), i = 0; size > i; i++)a[i] = defaultValue;
            return a
        }

        function UInt16Array(size, defaultValue) {
            var a, i;
            if (defaultValue = defaultValue || 0, "undefined" != typeof Uint16Array) {
                if (a = new Uint16Array(size), defaultValue)for (i = 0; size > i; i++)a[i] = defaultValue
            } else for (a = new Array(size), i = 0; size > i; i++)a[i] = defaultValue;
            return a
        }

        function fromPosixRegularExpression(expr) {
            return expr = expr.replace(/\[\:digit\:\]/g, "\\d"), expr = expr.replace(/\[\:alpha\:\]/g, "[A-Za-z]"), expr = expr.replace(/\[\:alnum\:\]/g, "[A-Za-z0-9]"), expr = expr.replace(/\[\:word\:\]/g, "\\w"), expr = expr.replace(/\[\:cntrl\:\]/g, "[\\x00-\\x1F\\x7F]"), expr = expr.replace(/\[\:graph\:\]/g, "[\\x21-\\x7E]"), expr = expr.replace(/\[\:lower\:\]/g, "[a-z]"), expr = expr.replace(/\[\:print\:\]/g, "[\\x20-\\x7E]"), expr = expr.replace(/\[\:punct\:\]/g, "[][!\"#$%&'()*+,./:;<=>?@\\^_`{|}~-]"), expr = expr.replace(/\[\:space\:\]/g, "\\s"), expr = expr.replace(/\[\:upper\:\]/g, "[A-Z]"), expr = expr.replace(/\[\:xdigit\:\]/g, "[A-Fa-f0-9]")
        }

        util.FloatArray = FloatArray, util.UInt16Array = UInt16Array, util.fromPosixRegularExpression = fromPosixRegularExpression
    }(cc.util || (cc.util = {}));
    cc.util
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (Debug) {
        function debug(level, msg, rest) {
            if (console.log("%c%s:%c %s", __consoleDecoration[level], DebugLevel[level], __defaultDecoration, msg), rest.length && console.log(rest), 2 === level && 0 === Debug.DEBUG_LEVEL)throw msg
        }

        function error(msg) {
            for (var rest = [], _i = 0; _i < arguments.length - 1; _i++)rest[_i] = arguments[_i + 1];
            cc.Debug.debug(2, msg, rest)
        }

        function warn(msg) {
            for (var rest = [], _i = 0; _i < arguments.length - 1; _i++)rest[_i] = arguments[_i + 1];
            cc.Debug.debug(1, msg, rest)
        }

        function info(msg) {
            for (var rest = [], _i = 0; _i < arguments.length - 1; _i++)rest[_i] = arguments[_i + 1];
            cc.Debug.debug(0, msg, rest)
        }

        !function (RuntimeDebugLevel) {
            RuntimeDebugLevel[RuntimeDebugLevel.DEBUG = 0] = "DEBUG", RuntimeDebugLevel[RuntimeDebugLevel.RELEASE = 1] = "RELEASE"
        }(Debug.RuntimeDebugLevel || (Debug.RuntimeDebugLevel = {}));
        Debug.RuntimeDebugLevel;
        Debug.DEBUG_LEVEL = 0, function (DebugLevel) {
            DebugLevel[DebugLevel.Info = 0] = "Info", DebugLevel[DebugLevel.Warning = 1] = "Warning", DebugLevel[DebugLevel.Error = 2] = "Error"
        }(Debug.DebugLevel || (Debug.DebugLevel = {}));
        var DebugLevel = Debug.DebugLevel, __consoleDecoration = ["", "background: orange; color: #000", "background: #a00; color: #fff"], __defaultDecoration = "background: #fff; color: #000";
        Debug.debug = debug, Debug.error = error, Debug.warn = warn, Debug.info = info
    }(cc.Debug || (cc.Debug = {}));
    cc.Debug
}(cc || (cc = {}));
var cc;
!function (cc) {
    !function (locale) {
        locale.NODE_WARN_REMOVEFROMPARENT_WITH_NO_PARENT = "Calling removeFromParent and the Node has no parent.", locale.ERR_NODE_NAME_INVALID = "Node name invalid. Must match [A-Za-z0-9_]+", locale.MSG_WRONG_ENUMERATE_PATTERN = "Wrongly defined search pattern path", locale.MSG_ENUMERATE_UNDERFLOW = "Enumerate path underflow. Trying to go above root node.", locale.MSG_ERROR_NODE_WITH_PARENT = "A node added as child has already a parent.", locale.ERR_RUNNING_ALREADY_EXISTING_SCENE = "runScene trying to run already existing Scene.", locale.ERR_DIRECTOR_POPSCENE_UNDERFLOW = "Director popScene underflow.", locale.WARN_START_ANIMATION_ON_RUNNING_DIRECTOR = "Starting animation on a running director.", locale.WARN_NODE_ATTRIBUTE_DOES_NOT_EXIST = "Attribute does not exist in Node object.", locale.WARN_TRACER_EMPTY = "Path not initialized so no current trace position. Defaulting to (0,0).", locale.WARN_TRACE_ON_CLOSED_SUBPATH = "Tracing on a closed SubPath.", locale.WARN_CLOSE_EMPTY_SUBPATH = "Closing empty SubPath.", locale.WARN_MOVETO_IN_NON_EMPTY_SUBPATH = "MoveTo in non empty SubPath.", locale.ERR_SUBPATH_NOT_STARTED = "getStartingPoint called in an empty path.", locale.ERR_SPRITE_FRAME_NO_TEXTURE = "SpriteFrame w/o Texture.", locale.ERR_SPRITE_CONSTRUCTOR_PARAM_ERROR = "No suitable SpriteInitializer to Sprite constructor.", locale.WARN_SPRITE_CONSTRUCTOR_DEPRECATED_CALL = "Sprite constructor call deprecated.", locale.WARN_SPRITEFRAME_CREATING_SUBFRAME_WITH_EXISTING_NAME = "Adding a SpriteFrame with existing name in cache."
    }(cc.locale || (cc.locale = {}));
    cc.locale
}(cc || (cc = {}));
//# sourceMappingURL=all.min.js.map